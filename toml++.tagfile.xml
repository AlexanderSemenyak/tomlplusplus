<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="class">
    <name>toml::array</name>
    <filename>classtoml_1_1array.html</filename>
    <base>toml::node</base>
    <member kind="function">
      <type>TOML_NODISCARD_CTOR</type>
      <name>array</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a85e42a8bd31186b83bfaf0b489ce75ad</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD_CTOR</type>
      <name>array</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a46715ce0ad61728317d3de9aabc412fc</anchor>
      <arglist>(const array &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD_CTOR</type>
      <name>array</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>af446bc3e0db972bf3a26af156e9a25ee</anchor>
      <arglist>(array &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TOML_CONSTRAINED_TEMPLATE</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a29b772f02887e1b97bb9e65b2f65b406</anchor>
      <arglist>((sizeof...(ElemTypes) &gt; 0||!std::is_same_v&lt; impl::remove_cvref&lt; ElemType &gt;, array &gt;), typename ElemType, typename... ElemTypes) TOML_NODISCARD_CTOR explicit array(ElemType &amp;&amp;val</arglist>
    </member>
    <member kind="function">
      <type>array &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a7e5e45777e08941abb2069a5991e1f31</anchor>
      <arglist>(array &amp;&amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER node_type</type>
      <name>type</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a3185fe479142c3fdbcb1754c2dcd512e</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a55e61806106fcd190a7175efb6b0fda7</anchor>
      <arglist>(node_type ntype) const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a9baf312538ab720ed2fbbba15378f5ca</anchor>
      <arglist>(node_type ntype, node *&amp;first_nonmatch) noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>aaf8ea860a9085b78043858c2f80290cb</anchor>
      <arglist>(node_type ntype, const node *&amp;first_nonmatch) const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER bool</type>
      <name>is_table</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ad46f9edd82602361738e25f5d47d5355</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER bool</type>
      <name>is_array</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a1551d8872d89dce40cb42c61966421f8</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_array_of_tables</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a234027645039da04b8a45c6d7c88d16a</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER bool</type>
      <name>is_value</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>adf08ca931484c7f9aa76642deee4cf97</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER bool</type>
      <name>is_string</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ab73e07d5577e79c5cc5c9a58052993d8</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER bool</type>
      <name>is_integer</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a287e2c628413a6f192a62e3f0a888c98</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER bool</type>
      <name>is_floating_point</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a2509f9acd45c759e18a8f3dcd69111c6</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER bool</type>
      <name>is_number</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a0ed3680a6ef7522f4f869645ab56031b</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER bool</type>
      <name>is_boolean</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a6f9eea5fa8d4d8cc9da460a35ba7596b</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER bool</type>
      <name>is_date</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ac023e792c5f9f507499ab4cfbbd9ce70</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER bool</type>
      <name>is_time</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ab194a79a2165b7a1f0cb9320e3bd9e25</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER bool</type>
      <name>is_date_time</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>af3dbc49c3b2b7bd9b3da1ce0d1f45671</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER table *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>af02b22269883085246707829b4365cb3</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER array *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a270de2352e39c13329f8c25f3358bdee</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER toml::value&lt; std::string &gt; *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a7bf6eec0d9da9ef6e56961b2b4c0471f</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER toml::value&lt; int64_t &gt; *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>aea0a59143c7c9befd3391128a288ac4f</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER toml::value&lt; double &gt; *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>af10068992364a40226a7ed3bf948c2ff</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER toml::value&lt; bool &gt; *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a62ac75a3dec50b93dad163abe1815139</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER toml::value&lt; date &gt; *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ab32733bd07f0df82fe4a6b0bc657c884</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER toml::value&lt; time &gt; *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a2521294d66781717678fffc57d49b72b</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER toml::value&lt; date_time &gt; *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ab44f4a6e87d0a2b53752f396d9aee0b3</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const TOML_CONST_INLINE_GETTER table *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a5b7fb69603e9e213b0ff28c2a8e8d5e2</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const TOML_CONST_INLINE_GETTER array *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a4a68b4ffe020f5508365776165c9da70</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const TOML_CONST_INLINE_GETTER toml::value&lt; std::string &gt; *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ab450df1add66a44efd451504af643109</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const TOML_CONST_INLINE_GETTER toml::value&lt; int64_t &gt; *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a541572f491c47b5805a18a33165bcd01</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const TOML_CONST_INLINE_GETTER toml::value&lt; double &gt; *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a303d22f2c9635f9faa42701b389fc38f</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const TOML_CONST_INLINE_GETTER toml::value&lt; bool &gt; *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ac4055bf0f63d1ec9575efb493e2d5a7f</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const TOML_CONST_INLINE_GETTER toml::value&lt; date &gt; *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a625ba01cd838062f64dc93ebbce0470b</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const TOML_CONST_INLINE_GETTER toml::value&lt; time &gt; *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>afb6cadd72f59b8841e34af688ffba9eb</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const TOML_CONST_INLINE_GETTER toml::value&lt; date_time &gt; *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ae100657abcc07ac0ac044557cad025f8</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER node *</type>
      <name>get</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>aaebc31d3ec5fa270f3a7a9ba296d21da</anchor>
      <arglist>(size_t index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TOML_PURE_INLINE_GETTER node *</type>
      <name>get</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>aaedcadac8b8bc481a3f139c070667646</anchor>
      <arglist>(size_t index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD impl::wrap_node&lt; ElemType &gt; *</type>
      <name>get_as</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a43d803b0ebfcaa16af5d1657b962ea71</anchor>
      <arglist>(size_t index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TOML_NODISCARD impl::wrap_node&lt; ElemType &gt; *</type>
      <name>get_as</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ad8b75c46260d6b4a0803ae2c50e046cc</anchor>
      <arglist>(size_t index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node &amp;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a5ef729c39866d63548f5695a6545aca2</anchor>
      <arglist>(size_t index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TOML_NODISCARD node &amp;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ad5af2205817406e377bbaec482fa086e</anchor>
      <arglist>(size_t index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node &amp;</type>
      <name>at</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a62a230c95607622e603e12d0abe4d7f0</anchor>
      <arglist>(size_t index)</arglist>
    </member>
    <member kind="function">
      <type>const TOML_NODISCARD node &amp;</type>
      <name>at</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ae853d13795008ab4dc462b66def2b931</anchor>
      <arglist>(size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node &amp;</type>
      <name>front</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>abe6511d30483cc1228af68c1b227c68d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TOML_NODISCARD node &amp;</type>
      <name>front</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a777ba8ae1f261379a6a00de08047d8e0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node &amp;</type>
      <name>back</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a736a3331e8a5cc0f9933c85a1f38ead8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TOML_NODISCARD node &amp;</type>
      <name>back</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>aa6ac8407eb1aee6a281e2af8340bc270</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD bool</type>
      <name>empty</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>afbd50e44a71e21cf7ada1d297cbd77d1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD size_t</type>
      <name>size</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a5e4c1e3211d27e4368e02c7922a71c90</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD size_t</type>
      <name>max_size</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a66cf44d4482ab840d536f1a1fc7f728f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD size_t</type>
      <name>capacity</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a26affdec8d4eed8a2b54d9eb50062bc8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a1ba073adc52c3df5ad29cfd7e5daa1d5</anchor>
      <arglist>(size_t new_capacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrink_to_fit</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a718c2031ead428aa52912741f6d094aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>truncate</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a6e3ac9962c706a88c1001ff83a4084f3</anchor>
      <arglist>(size_t new_size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ab1aca2337ffce7e583a2cf303f16259f</anchor>
      <arglist>(size_t new_size, ElemType &amp;&amp;default_init_val, value_flags default_init_flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a22389a9ed9444fe52be10c4acbdec908</anchor>
      <arglist>(const_iterator pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a723388860d72c9a162137d0293366fb2</anchor>
      <arglist>(const_iterator first, const_iterator last) noexcept</arglist>
    </member>
    <member kind="function">
      <type>array &amp;</type>
      <name>flatten</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>aa2a21958705629bde15aafae9598a2ec</anchor>
      <arglist>() &amp;</arglist>
    </member>
    <member kind="function">
      <type>array &amp;&amp;</type>
      <name>flatten</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ad307bea17e7640c57715d67ab8a777d4</anchor>
      <arglist>() &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>array &amp;</type>
      <name>prune</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ae548cf1dc26ade60733548a00a39b175</anchor>
      <arglist>(bool recursive=true) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>array &amp;&amp;</type>
      <name>prune</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a6fc918a151ada40c713d6855af3021c2</anchor>
      <arglist>(bool recursive=true) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_back</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>af99d72e29cef84f736d91d627b47a1dc</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>adaa65bf63f29f898c27423306c165d68</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a17c7e34b433ea8907186dbb1788c9d37</anchor>
      <arglist>(const_iterator pos, ElemType &amp;&amp;val, value_flags flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a55a9e6e742e556ea07573d29c23ce7df</anchor>
      <arglist>(const_iterator pos, size_t count, ElemType &amp;&amp;val, value_flags flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a60a0d39bfd8721cef23e155f5504d54d</anchor>
      <arglist>(const_iterator pos, Iter first, Iter last, value_flags flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a1baecd5d579afb508886572674b89781</anchor>
      <arglist>(const_iterator pos, std::initializer_list&lt; ElemType &gt; ilist, value_flags flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>emplace</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a4110b96386b33097a255f3694ac01d4a</anchor>
      <arglist>(const_iterator pos, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>replace</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a37a8a283e6c1cbeef757b2e59489ee6c</anchor>
      <arglist>(const_iterator pos, ElemType &amp;&amp;val, value_flags flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ab7188537b351ef3a756b54b83e4b05b3</anchor>
      <arglist>(ElemType &amp;&amp;val, value_flags flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>emplace_back</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ad1383e120e7f8d8fe54e07dab164bd6d</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="friend">
      <type>const array &amp;const true std::vector&lt; T &gt; friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a3132b6d1c3ee4035976993abbe593038</anchor>
      <arglist>(std::ostream &amp;lhs, const array &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>TOML_NODISCARD friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a9b0bbc5272ae44ea14a06ec70cfa1882</anchor>
      <arglist>(const array &amp;lhs, const array &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_NODISCARD friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a45e3c17332ca62a1e0bff55d0808116c</anchor>
      <arglist>(const array &amp;lhs, const array &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_NODISCARD friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a12cf27ed8dbb468cff18164aad02e289</anchor>
      <arglist>(const array &amp;lhs, const std::initializer_list&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>const array &amp;const true std::initializer_list&lt; T &gt; TOML_NODISCARD friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a2197734b6fca72f244ce4d5473836fd9</anchor>
      <arglist>(const array &amp;lhs, const std::vector&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER node_type</type>
      <name>type</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a3185fe479142c3fdbcb1754c2dcd512e</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a55e61806106fcd190a7175efb6b0fda7</anchor>
      <arglist>(node_type ntype) const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a9baf312538ab720ed2fbbba15378f5ca</anchor>
      <arglist>(node_type ntype, node *&amp;first_nonmatch) noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>aaf8ea860a9085b78043858c2f80290cb</anchor>
      <arglist>(node_type ntype, const node *&amp;first_nonmatch) const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER bool</type>
      <name>is_table</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ad46f9edd82602361738e25f5d47d5355</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER bool</type>
      <name>is_array</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a1551d8872d89dce40cb42c61966421f8</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_array_of_tables</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a234027645039da04b8a45c6d7c88d16a</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER bool</type>
      <name>is_value</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>adf08ca931484c7f9aa76642deee4cf97</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER bool</type>
      <name>is_string</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ab73e07d5577e79c5cc5c9a58052993d8</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER bool</type>
      <name>is_integer</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a287e2c628413a6f192a62e3f0a888c98</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER bool</type>
      <name>is_floating_point</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a2509f9acd45c759e18a8f3dcd69111c6</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER bool</type>
      <name>is_number</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a0ed3680a6ef7522f4f869645ab56031b</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER bool</type>
      <name>is_boolean</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a6f9eea5fa8d4d8cc9da460a35ba7596b</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER bool</type>
      <name>is_date</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ac023e792c5f9f507499ab4cfbbd9ce70</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER bool</type>
      <name>is_time</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ab194a79a2165b7a1f0cb9320e3bd9e25</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER bool</type>
      <name>is_date_time</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>af3dbc49c3b2b7bd9b3da1ce0d1f45671</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER table *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>af02b22269883085246707829b4365cb3</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER array *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a270de2352e39c13329f8c25f3358bdee</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER toml::value&lt; std::string &gt; *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a7bf6eec0d9da9ef6e56961b2b4c0471f</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER toml::value&lt; int64_t &gt; *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>aea0a59143c7c9befd3391128a288ac4f</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER toml::value&lt; double &gt; *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>af10068992364a40226a7ed3bf948c2ff</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER toml::value&lt; bool &gt; *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a62ac75a3dec50b93dad163abe1815139</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER toml::value&lt; date &gt; *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ab32733bd07f0df82fe4a6b0bc657c884</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER toml::value&lt; time &gt; *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a2521294d66781717678fffc57d49b72b</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_CONST_INLINE_GETTER toml::value&lt; date_time &gt; *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ab44f4a6e87d0a2b53752f396d9aee0b3</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const TOML_CONST_INLINE_GETTER table *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a5b7fb69603e9e213b0ff28c2a8e8d5e2</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const TOML_CONST_INLINE_GETTER array *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a4a68b4ffe020f5508365776165c9da70</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const TOML_CONST_INLINE_GETTER toml::value&lt; std::string &gt; *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ab450df1add66a44efd451504af643109</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const TOML_CONST_INLINE_GETTER toml::value&lt; int64_t &gt; *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a541572f491c47b5805a18a33165bcd01</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const TOML_CONST_INLINE_GETTER toml::value&lt; double &gt; *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a303d22f2c9635f9faa42701b389fc38f</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const TOML_CONST_INLINE_GETTER toml::value&lt; bool &gt; *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ac4055bf0f63d1ec9575efb493e2d5a7f</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const TOML_CONST_INLINE_GETTER toml::value&lt; date &gt; *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a625ba01cd838062f64dc93ebbce0470b</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const TOML_CONST_INLINE_GETTER toml::value&lt; time &gt; *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>afb6cadd72f59b8841e34af688ffba9eb</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const TOML_CONST_INLINE_GETTER toml::value&lt; date_time &gt; *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ae100657abcc07ac0ac044557cad025f8</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER node *</type>
      <name>get</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>aaebc31d3ec5fa270f3a7a9ba296d21da</anchor>
      <arglist>(size_t index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TOML_PURE_INLINE_GETTER node *</type>
      <name>get</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>aaedcadac8b8bc481a3f139c070667646</anchor>
      <arglist>(size_t index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD impl::wrap_node&lt; ElemType &gt; *</type>
      <name>get_as</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a43d803b0ebfcaa16af5d1657b962ea71</anchor>
      <arglist>(size_t index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TOML_NODISCARD impl::wrap_node&lt; ElemType &gt; *</type>
      <name>get_as</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ad8b75c46260d6b4a0803ae2c50e046cc</anchor>
      <arglist>(size_t index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node &amp;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a5ef729c39866d63548f5695a6545aca2</anchor>
      <arglist>(size_t index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TOML_NODISCARD node &amp;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ad5af2205817406e377bbaec482fa086e</anchor>
      <arglist>(size_t index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node &amp;</type>
      <name>at</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a62a230c95607622e603e12d0abe4d7f0</anchor>
      <arglist>(size_t index)</arglist>
    </member>
    <member kind="function">
      <type>const TOML_NODISCARD node &amp;</type>
      <name>at</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ae853d13795008ab4dc462b66def2b931</anchor>
      <arglist>(size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node &amp;</type>
      <name>front</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>abe6511d30483cc1228af68c1b227c68d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TOML_NODISCARD node &amp;</type>
      <name>front</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a777ba8ae1f261379a6a00de08047d8e0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node &amp;</type>
      <name>back</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a736a3331e8a5cc0f9933c85a1f38ead8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TOML_NODISCARD node &amp;</type>
      <name>back</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>aa6ac8407eb1aee6a281e2af8340bc270</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="typedef">
      <type>array_iterator</type>
      <name>iterator</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a62a18471ca7c5b06204d2e26c963f833</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_array_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>adfd38318d3390a76f073a83fd2f2aa21</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD iterator</type>
      <name>begin</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>aa0c9ea44bb8f5340b9ac57c6c70c63c0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD const_iterator</type>
      <name>begin</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>af33e58ad8167a230a3099d6911c71462</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a5d475058c60eca19e9a62b477c8dbfbc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD iterator</type>
      <name>end</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a3c12960f383a5f17481b63a3462951f2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD const_iterator</type>
      <name>end</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a368fc6cff9d1b811a2a48cb74efb1376</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD const_iterator</type>
      <name>cend</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a68faff77b772f07cec7634871e09bf33</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>array &amp;</type>
      <name>for_each</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a1154a3d27b1af41ffaa498c8d6070b88</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;noexcept(for_each_is_nothrow&lt; Func &amp;&amp;, array &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>array &amp;&amp;</type>
      <name>for_each</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>aa7d6dd4f662a93b97d1e750a57df7efc</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;&amp;noexcept(for_each_is_nothrow&lt; Func &amp;&amp;, array &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>const array &amp;</type>
      <name>for_each</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a335c0d9bac1ca2b03a961dbe4dabc386</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;noexcept(for_each_is_nothrow&lt; Func &amp;&amp;, const array &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>const array &amp;&amp;</type>
      <name>for_each</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a944a1130f3dd2b7aa13c38bd600295b5</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;&amp;noexcept(for_each_is_nothrow&lt; Func &amp;&amp;, const array &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD bool</type>
      <name>empty</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>afbd50e44a71e21cf7ada1d297cbd77d1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD size_t</type>
      <name>size</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a5e4c1e3211d27e4368e02c7922a71c90</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD size_t</type>
      <name>max_size</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a66cf44d4482ab840d536f1a1fc7f728f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD size_t</type>
      <name>capacity</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a26affdec8d4eed8a2b54d9eb50062bc8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a1ba073adc52c3df5ad29cfd7e5daa1d5</anchor>
      <arglist>(size_t new_capacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrink_to_fit</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a718c2031ead428aa52912741f6d094aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>truncate</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a6e3ac9962c706a88c1001ff83a4084f3</anchor>
      <arglist>(size_t new_size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ab1aca2337ffce7e583a2cf303f16259f</anchor>
      <arglist>(size_t new_size, ElemType &amp;&amp;default_init_val, value_flags default_init_flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a22389a9ed9444fe52be10c4acbdec908</anchor>
      <arglist>(const_iterator pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a723388860d72c9a162137d0293366fb2</anchor>
      <arglist>(const_iterator first, const_iterator last) noexcept</arglist>
    </member>
    <member kind="function">
      <type>array &amp;</type>
      <name>flatten</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>aa2a21958705629bde15aafae9598a2ec</anchor>
      <arglist>() &amp;</arglist>
    </member>
    <member kind="function">
      <type>array &amp;&amp;</type>
      <name>flatten</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ad307bea17e7640c57715d67ab8a777d4</anchor>
      <arglist>() &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>array &amp;</type>
      <name>prune</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ae548cf1dc26ade60733548a00a39b175</anchor>
      <arglist>(bool recursive=true) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>array &amp;&amp;</type>
      <name>prune</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a6fc918a151ada40c713d6855af3021c2</anchor>
      <arglist>(bool recursive=true) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_back</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>af99d72e29cef84f736d91d627b47a1dc</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>adaa65bf63f29f898c27423306c165d68</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a17c7e34b433ea8907186dbb1788c9d37</anchor>
      <arglist>(const_iterator pos, ElemType &amp;&amp;val, value_flags flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a55a9e6e742e556ea07573d29c23ce7df</anchor>
      <arglist>(const_iterator pos, size_t count, ElemType &amp;&amp;val, value_flags flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a60a0d39bfd8721cef23e155f5504d54d</anchor>
      <arglist>(const_iterator pos, Iter first, Iter last, value_flags flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a1baecd5d579afb508886572674b89781</anchor>
      <arglist>(const_iterator pos, std::initializer_list&lt; ElemType &gt; ilist, value_flags flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>emplace</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a4110b96386b33097a255f3694ac01d4a</anchor>
      <arglist>(const_iterator pos, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>replace</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a37a8a283e6c1cbeef757b2e59489ee6c</anchor>
      <arglist>(const_iterator pos, ElemType &amp;&amp;val, value_flags flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ab7188537b351ef3a756b54b83e4b05b3</anchor>
      <arglist>(ElemType &amp;&amp;val, value_flags flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>emplace_back</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ad1383e120e7f8d8fe54e07dab164bd6d</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="friend">
      <type>TOML_NODISCARD friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a9b0bbc5272ae44ea14a06ec70cfa1882</anchor>
      <arglist>(const array &amp;lhs, const array &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_NODISCARD friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a45e3c17332ca62a1e0bff55d0808116c</anchor>
      <arglist>(const array &amp;lhs, const array &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_NODISCARD friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a12cf27ed8dbb468cff18164aad02e289</anchor>
      <arglist>(const array &amp;lhs, const std::initializer_list&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>const array &amp;const true std::initializer_list&lt; T &gt; TOML_NODISCARD friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a2197734b6fca72f244ce4d5473836fd9</anchor>
      <arglist>(const array &amp;lhs, const std::vector&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa94b031f02a932c90beb70896467f3e0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER bool</type>
      <name>is</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a9ecbbcf44989af503bf272214c3b943a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a42c16f19aa5bdeba64c62d500e6a07dd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TOML_PURE_INLINE_GETTER impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a98d0bc7e2b3d5bf76356bb75ef7eaded</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD optional&lt; T &gt;</type>
      <name>value_exact</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a41028c589c26e362a2eadfc34319f88f</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD optional&lt; T &gt;</type>
      <name>value</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a0537ef983c04ac04458d69817673eb64</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD auto</type>
      <name>value_or</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>af627a857a57927e3168bf2615a09e55e</anchor>
      <arglist>(T &amp;&amp;default_value) const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto) TOML_PURE_GETTER</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>af74590ffce9dbece0bfe513748946bf8</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto) TOML_PURE_GETTER</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad84b9061d3d79e98b3fd821d0b2f848f</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto) TOML_PURE_GETTER</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a93a67fe01c09c44c6efadad76b79ee0d</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto) TOML_PURE_GETTER</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a8f4542448fdb626f79c83675b90b4878</anchor>
      <arglist>() const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TOML_PURE_INLINE_GETTER source_region &amp;</type>
      <name>source</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a00fcd61d1fe6e5eff55fcc73125b203d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad47390f3832260db7bf06cd282598240</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a371a03c4b91cfbb8d9ee785c1eacf836</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad4a42e50f923b0fe1efff0a6719dab90</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac387cb04111addc0c291ecdd6f299666</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD</type>
      <name>operator node_view&lt; node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac93b48af1a887df8a7ed920feb466025</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD</type>
      <name>operator node_view&lt; const node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a5bcdd9384e6bc00070f9dbb1a10a92d5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a6fbac216f402b92a357e08bc259f70e9</anchor>
      <arglist>(std::string_view path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a670a31c35e3f2e8ffe0d622df3afcbf9</anchor>
      <arglist>(std::string_view path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a7c588b117fa0a1cecc1a74ca6b60b481</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a58a3340e6f377095c72fb85b391985ba</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a5c437295e93e6d680e984ad9c456e792</anchor>
      <arglist>(std::wstring_view path)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a4a1e58e889df8f0dcba278f532957607</anchor>
      <arglist>(std::wstring_view path) const</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a49bbc83d8ea5ee5167fb32531fd86547</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a04d5383250b06484da6fd8710e6b0c68</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>toml::date</name>
    <filename>structtoml_1_1date.html</filename>
    <member kind="function">
      <type>TOML_NODISCARD_CTOR</type>
      <name>date</name>
      <anchorfile>structtoml_1_1date.html</anchorfile>
      <anchor>a264966c24b3455a860de1455f5f99735</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TOML_CONSTRAINED_TEMPLATE</name>
      <anchorfile>structtoml_1_1date.html</anchorfile>
      <anchor>a3a9f605c97507585e6cf429df1e01da1</anchor>
      <arglist>((impl::all_integral&lt; Y, M, D &gt;), typename Y, typename M, typename D) TOML_NODISCARD_CTOR const expr date(Y y</arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>year</name>
      <anchorfile>structtoml_1_1date.html</anchorfile>
      <anchor>ad1dc522b115c69dc908540b1c6ff792b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>month</name>
      <anchorfile>structtoml_1_1date.html</anchorfile>
      <anchor>a0528c722d0a81741a95f6e3a1116614e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>day</name>
      <anchorfile>structtoml_1_1date.html</anchorfile>
      <anchor>a8ec7a7238b8edd3341b450a7b43ec011</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>toml::date_time</name>
    <filename>structtoml_1_1date__time.html</filename>
    <member kind="function">
      <type>TOML_NODISCARD_CTOR</type>
      <name>date_time</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>a4fc84f5db21c774587d0c096e791a1a3</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr TOML_NODISCARD_CTOR</type>
      <name>date_time</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>aaf2c6eb75543853e38c72c40a5af3a3b</anchor>
      <arglist>(const toml::date &amp;d, const toml::time &amp;t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr TOML_NODISCARD_CTOR</type>
      <name>date_time</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>ab8c0e32637dc26fc02da72c7e6bde038</anchor>
      <arglist>(const toml::date &amp;d) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr TOML_NODISCARD_CTOR</type>
      <name>date_time</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>a302d523b6d4fbe2504cd91f113a7f4bb</anchor>
      <arglist>(const toml::time &amp;t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr TOML_NODISCARD_CTOR</type>
      <name>date_time</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>a2b23c70767a6f59aa397c3d968519568</anchor>
      <arglist>(const toml::date &amp;d, const toml::time &amp;t, const toml::time_offset &amp;off) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr TOML_PURE_INLINE_GETTER bool</type>
      <name>is_local</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>ab9abde179196090765bd171c150775a4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>toml::date</type>
      <name>date</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>a89f398585f373d1e7bd59fe440212074</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>toml::time</type>
      <name>time</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>a18d5e772db4f61635643cda390c2b720</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>optional&lt; toml::time_offset &gt;</type>
      <name>offset</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>af8596013f522b94a88d2caf69e90a1f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_GETTER constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>afb1a9310531495aa0600d314a89e54d9</anchor>
      <arglist>(const date_time &amp;lhs, const date_time &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>ac0893e5073c20c62506b3c59baaabd1c</anchor>
      <arglist>(const date_time &amp;lhs, const date_time &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_GETTER constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>a75c9cc85d60047669e2233f658a312b0</anchor>
      <arglist>(const date_time &amp;lhs, const date_time &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_GETTER constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>a3dc97d1244f2b5d2351910f399bef62f</anchor>
      <arglist>(const date_time &amp;lhs, const date_time &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>a233b19e89a954700a00d659e741bc72b</anchor>
      <arglist>(const date_time &amp;lhs, const date_time &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>a1b28f0d7b6b003192ee5b249defb7e4f</anchor>
      <arglist>(const date_time &amp;lhs, const date_time &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>a5a090cb9dfa0d6a3e74603ba702bbddc</anchor>
      <arglist>(std::ostream &amp;lhs, const date_time &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>toml::inserter</name>
    <filename>structtoml_1_1inserter.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>toml::json_formatter</name>
    <filename>classtoml_1_1json__formatter.html</filename>
    <member kind="function">
      <type>TOML_NODISCARD_CTOR</type>
      <name>json_formatter</name>
      <anchorfile>classtoml_1_1json__formatter.html</anchorfile>
      <anchor>a47419545796ec6b7456eb1b91c806e5e</anchor>
      <arglist>(const toml::node &amp;source, format_flags flags=default_flags) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD_CTOR</type>
      <name>json_formatter</name>
      <anchorfile>classtoml_1_1json__formatter.html</anchorfile>
      <anchor>a105ac75c21e8869204e1ca53884962a8</anchor>
      <arglist>(const toml::parse_result &amp;result, format_flags flags=default_flags) noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr format_flags</type>
      <name>default_flags</name>
      <anchorfile>classtoml_1_1json__formatter.html</anchorfile>
      <anchor>a4541a4662894ce8936f6f2c3ab90fe2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classtoml_1_1json__formatter.html</anchorfile>
      <anchor>a2b88bc230c589c1fad25ffd8df96b74e</anchor>
      <arglist>(std::ostream &amp;lhs, json_formatter &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classtoml_1_1json__formatter.html</anchorfile>
      <anchor>a5eefe4e5ca640b12fbb09fd521eab335</anchor>
      <arglist>(std::ostream &amp;lhs, json_formatter &amp;&amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>toml::key</name>
    <filename>classtoml_1_1key.html</filename>
    <member kind="function">
      <type>TOML_NODISCARD_CTOR</type>
      <name>key</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>aa58e9033f94bcefd6944ece84d3a6636</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD_CTOR</type>
      <name>key</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>af286c7aba87b6677c9e4c42af44b647c</anchor>
      <arglist>(std::string_view k, source_region &amp;&amp;src={})</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD_CTOR</type>
      <name>key</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a9695ec10d5f9345efd37bafafa3d6264</anchor>
      <arglist>(std::string_view k, const source_region &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD_CTOR</type>
      <name>key</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>ab60960cf88f177a25a1cb2bbf636d8be</anchor>
      <arglist>(std::string &amp;&amp;k, source_region &amp;&amp;src={}) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD_CTOR</type>
      <name>key</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>aa4624883617580986aa9d9e9a1166dba</anchor>
      <arglist>(std::string &amp;&amp;k, const source_region &amp;src) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD_CTOR</type>
      <name>key</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a4e5dc59a97c25db9c729b92506520986</anchor>
      <arglist>(const char *k, source_region &amp;&amp;src={})</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD_CTOR</type>
      <name>key</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a285313ac4efbd6a36f16025a465e65bc</anchor>
      <arglist>(const char *k, const source_region &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD_CTOR</type>
      <name>key</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>af94f31b7748e73f6c02321e5a4beea40</anchor>
      <arglist>(std::wstring_view k, source_region &amp;&amp;src={})</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD_CTOR</type>
      <name>key</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>ac223fe5ef645100edbaca8b30d847047</anchor>
      <arglist>(std::wstring_view k, const source_region &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER std::string_view</type>
      <name>str</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a5e1c467571064fff9fb8f1a693413e84</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER</type>
      <name>operator std::string_view</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a26e815dda718b8d7487d9aaf2533dc55</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER bool</type>
      <name>empty</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a989b8ef164734ac255f92710dda65e08</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TOML_PURE_INLINE_GETTER char *</type>
      <name>data</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a664ebd4b9f25157601622f68b1d933e8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER size_t</type>
      <name>length</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a50883fb7f4c5d1008cd7db914783b7dc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TOML_PURE_INLINE_GETTER source_region &amp;</type>
      <name>source</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>afcf2249ca655b4b671954a9faea0363d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a78eb7afc69ecd78f4f6ded062f2f7ea7</anchor>
      <arglist>(std::ostream &amp;lhs, const key &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>af5efb311a2378ef8bd60a0620fec3b4e</anchor>
      <arglist>(const key &amp;lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a1c3a4699f2abe4365bd4bb46b68a4f89</anchor>
      <arglist>(const key &amp;lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>ac34c0c14898d19943340e4d66b947b47</anchor>
      <arglist>(const key &amp;lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a31a615ae8621f770aae1fe0ef9bdb9dd</anchor>
      <arglist>(const key &amp;lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a1fafd12bdd553c55249cc2a1abfdb680</anchor>
      <arglist>(const key &amp;lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>acba74ce07f1b7cef9f89ac2319fcaf76</anchor>
      <arglist>(const key &amp;lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>ab1df1d37245813c93c397068c858c632</anchor>
      <arglist>(const key &amp;lhs, std::string_view rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a664d06b076fcd39af9c40aeb54ca7dcb</anchor>
      <arglist>(const key &amp;lhs, std::string_view rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a40b714599a6b6c5a66bd613845564270</anchor>
      <arglist>(const key &amp;lhs, std::string_view rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>ad63a16d67cda379cc358cbbdb1d3c26a</anchor>
      <arglist>(const key &amp;lhs, std::string_view rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a4a7be554b8ed33b58c9de6ff473a12b8</anchor>
      <arglist>(const key &amp;lhs, std::string_view rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>aefc54f8f8b825bc4d4bded604008e3d1</anchor>
      <arglist>(const key &amp;lhs, std::string_view rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a5cf2447c26814c045e219be91e54ca56</anchor>
      <arglist>(std::string_view lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a217f3988df65d9e58d0646bae47ef1c2</anchor>
      <arglist>(std::string_view lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>ae3599eadf7d8f7b422976884a87a3ea4</anchor>
      <arglist>(std::string_view lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a591246a9a6e2db8721763e0a399a7cbe</anchor>
      <arglist>(std::string_view lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a01e3941d4730f8488f0dbed1189518be</anchor>
      <arglist>(std::string_view lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a022c5456085bd0f1a4865f6b43da861f</anchor>
      <arglist>(std::string_view lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER std::string_view</type>
      <name>str</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a5e1c467571064fff9fb8f1a693413e84</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER</type>
      <name>operator std::string_view</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a26e815dda718b8d7487d9aaf2533dc55</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER bool</type>
      <name>empty</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a989b8ef164734ac255f92710dda65e08</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TOML_PURE_INLINE_GETTER char *</type>
      <name>data</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a664ebd4b9f25157601622f68b1d933e8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER size_t</type>
      <name>length</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a50883fb7f4c5d1008cd7db914783b7dc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TOML_PURE_INLINE_GETTER source_region &amp;</type>
      <name>source</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>afcf2249ca655b4b671954a9faea0363d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>af5efb311a2378ef8bd60a0620fec3b4e</anchor>
      <arglist>(const key &amp;lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a1c3a4699f2abe4365bd4bb46b68a4f89</anchor>
      <arglist>(const key &amp;lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>ac34c0c14898d19943340e4d66b947b47</anchor>
      <arglist>(const key &amp;lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a31a615ae8621f770aae1fe0ef9bdb9dd</anchor>
      <arglist>(const key &amp;lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a1fafd12bdd553c55249cc2a1abfdb680</anchor>
      <arglist>(const key &amp;lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>acba74ce07f1b7cef9f89ac2319fcaf76</anchor>
      <arglist>(const key &amp;lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>ab1df1d37245813c93c397068c858c632</anchor>
      <arglist>(const key &amp;lhs, std::string_view rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a664d06b076fcd39af9c40aeb54ca7dcb</anchor>
      <arglist>(const key &amp;lhs, std::string_view rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a40b714599a6b6c5a66bd613845564270</anchor>
      <arglist>(const key &amp;lhs, std::string_view rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>ad63a16d67cda379cc358cbbdb1d3c26a</anchor>
      <arglist>(const key &amp;lhs, std::string_view rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a4a7be554b8ed33b58c9de6ff473a12b8</anchor>
      <arglist>(const key &amp;lhs, std::string_view rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>aefc54f8f8b825bc4d4bded604008e3d1</anchor>
      <arglist>(const key &amp;lhs, std::string_view rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a5cf2447c26814c045e219be91e54ca56</anchor>
      <arglist>(std::string_view lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a217f3988df65d9e58d0646bae47ef1c2</anchor>
      <arglist>(std::string_view lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>ae3599eadf7d8f7b422976884a87a3ea4</anchor>
      <arglist>(std::string_view lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a591246a9a6e2db8721763e0a399a7cbe</anchor>
      <arglist>(std::string_view lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a01e3941d4730f8488f0dbed1189518be</anchor>
      <arglist>(std::string_view lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a022c5456085bd0f1a4865f6b43da861f</anchor>
      <arglist>(std::string_view lhs, const key &amp;rhs) noexcept</arglist>
    </member>
    <member kind="typedef">
      <type>const char *</type>
      <name>const_iterator</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a38a33d5010936195ac2083e428165512</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_iterator</type>
      <name>iterator</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a40c42bc323383db54972b5752b9ad4dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER const_iterator</type>
      <name>begin</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>a580d5489c75e41291d078d925585c4c3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER const_iterator</type>
      <name>end</name>
      <anchorfile>classtoml_1_1key.html</anchorfile>
      <anchor>ab280f775e472210a522df164949aa5ce</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>toml::node</name>
    <filename>classtoml_1_1node.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual TOML_PURE_GETTER bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a5211d627f220bbbd45f9e55107db59c7</anchor>
      <arglist>(node_type ntype, node *&amp;first_nonmatch) noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TOML_PURE_GETTER bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a229ee4a30b8ab3925a17244b86e14a7d</anchor>
      <arglist>(node_type ntype, const node *&amp;first_nonmatch) const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TOML_PURE_GETTER bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a6b26096a3edf579a9ee1b5e8cdfcc0b4</anchor>
      <arglist>(node_type ntype) const noexcept=0</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa94b031f02a932c90beb70896467f3e0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TOML_PURE_GETTER node_type</type>
      <name>type</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a933102ca4bca0e281a1ff7c8da20ab55</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TOML_PURE_GETTER bool</type>
      <name>is_table</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a47cbfb49d540a3406d35b755271bedb8</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TOML_PURE_GETTER bool</type>
      <name>is_array</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a4dc88c8a5f725a59b9b7d0244eefa81f</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TOML_PURE_GETTER bool</type>
      <name>is_array_of_tables</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac3a018435623256c0a09823603f4810e</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TOML_PURE_GETTER bool</type>
      <name>is_value</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a74db0de38f510be7e05d3c5e48b930b3</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TOML_PURE_GETTER bool</type>
      <name>is_string</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ae80d018fffe108a20b5aa1a5ec4d8f6a</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TOML_PURE_GETTER bool</type>
      <name>is_integer</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a5665bd9460a29a1b774a5e8723056e43</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TOML_PURE_GETTER bool</type>
      <name>is_floating_point</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a2b288c11030ef501608ebb808e76baa0</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TOML_PURE_GETTER bool</type>
      <name>is_number</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aff692ff4cda0a6fb3659daa0ed2fbe7c</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TOML_PURE_GETTER bool</type>
      <name>is_boolean</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ab4e6420a37185c6d25d8fdf7678606e7</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TOML_PURE_GETTER bool</type>
      <name>is_date</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a54dbc43059a4f1e93215de4793644664</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TOML_PURE_GETTER bool</type>
      <name>is_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>af1cb224e31d3b09ea0d7755228afad66</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TOML_PURE_GETTER bool</type>
      <name>is_date_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad14b93346199b0c686d63f612c0e9f73</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER bool</type>
      <name>is</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a9ecbbcf44989af503bf272214c3b943a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TOML_PURE_GETTER table *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ab3fda1a11e2e12a9e1fd0a8e7f682bcc</anchor>
      <arglist>() noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TOML_PURE_GETTER array *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad84da5072f2442ff58b216d4345102f8</anchor>
      <arglist>() noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TOML_PURE_GETTER toml::value&lt; std::string &gt; *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>af6ce12b75f8ab5b3b56dde86065eb442</anchor>
      <arglist>() noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TOML_PURE_GETTER toml::value&lt; int64_t &gt; *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac1f68d7b24e8fa38e4f5afd1d8c66860</anchor>
      <arglist>() noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TOML_PURE_GETTER toml::value&lt; double &gt; *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a4ae2d6c5aadfc4367769511c23e2086c</anchor>
      <arglist>() noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TOML_PURE_GETTER toml::value&lt; bool &gt; *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aed6ca32e723453adb018c420de596401</anchor>
      <arglist>() noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TOML_PURE_GETTER toml::value&lt; date &gt; *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a71f2286c2ba31938436aea97a9242e7e</anchor>
      <arglist>() noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TOML_PURE_GETTER toml::value&lt; time &gt; *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a344af149b742cd5481320d96ab93fed7</anchor>
      <arglist>() noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TOML_PURE_GETTER toml::value&lt; date_time &gt; *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac736c1639f4e6ac539fb68a053e5db8d</anchor>
      <arglist>() noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const TOML_PURE_GETTER table *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a7ad62891cbab21eed241696670c09d14</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const TOML_PURE_GETTER array *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a7d212a6b752fb7d6160186480b81e70b</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const TOML_PURE_GETTER toml::value&lt; std::string &gt; *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aebfb9d31c7580cac78992aebed087783</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const TOML_PURE_GETTER toml::value&lt; int64_t &gt; *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a125c67a9f82e5fc2892d78617fb25c22</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const TOML_PURE_GETTER toml::value&lt; double &gt; *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>abad06691206a155c54c368bf7c68a824</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const TOML_PURE_GETTER toml::value&lt; bool &gt; *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a1e59cab0efd031357204cf53037c0c2d</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const TOML_PURE_GETTER toml::value&lt; date &gt; *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a48949eda45ada40109af66e11a5404a5</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const TOML_PURE_GETTER toml::value&lt; time &gt; *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a0be0d1fd3ce716beab3f49dbdb119328</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const TOML_PURE_GETTER toml::value&lt; date_time &gt; *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ab9414661784b61647e1cd76757ee475e</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a42c16f19aa5bdeba64c62d500e6a07dd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TOML_PURE_INLINE_GETTER impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a98d0bc7e2b3d5bf76356bb75ef7eaded</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD optional&lt; T &gt;</type>
      <name>value_exact</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a41028c589c26e362a2eadfc34319f88f</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD optional&lt; T &gt;</type>
      <name>value</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a0537ef983c04ac04458d69817673eb64</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD auto</type>
      <name>value_or</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>af627a857a57927e3168bf2615a09e55e</anchor>
      <arglist>(T &amp;&amp;default_value) const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto) TOML_PURE_GETTER</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>af74590ffce9dbece0bfe513748946bf8</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto) TOML_PURE_GETTER</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad84b9061d3d79e98b3fd821d0b2f848f</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto) TOML_PURE_GETTER</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a93a67fe01c09c44c6efadad76b79ee0d</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto) TOML_PURE_GETTER</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a8f4542448fdb626f79c83675b90b4878</anchor>
      <arglist>() const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TOML_PURE_INLINE_GETTER source_region &amp;</type>
      <name>source</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a00fcd61d1fe6e5eff55fcc73125b203d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad47390f3832260db7bf06cd282598240</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a371a03c4b91cfbb8d9ee785c1eacf836</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad4a42e50f923b0fe1efff0a6719dab90</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac387cb04111addc0c291ecdd6f299666</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD</type>
      <name>operator node_view&lt; node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac93b48af1a887df8a7ed920feb466025</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD</type>
      <name>operator node_view&lt; const node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a5bcdd9384e6bc00070f9dbb1a10a92d5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a6fbac216f402b92a357e08bc259f70e9</anchor>
      <arglist>(std::string_view path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a670a31c35e3f2e8ffe0d622df3afcbf9</anchor>
      <arglist>(std::string_view path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a7c588b117fa0a1cecc1a74ca6b60b481</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a58a3340e6f377095c72fb85b391985ba</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a5c437295e93e6d680e984ad9c456e792</anchor>
      <arglist>(std::wstring_view path)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a4a1e58e889df8f0dcba278f532957607</anchor>
      <arglist>(std::wstring_view path) const</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a49bbc83d8ea5ee5167fb32531fd86547</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a04d5383250b06484da6fd8710e6b0c68</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>toml::node_view</name>
    <filename>classtoml_1_1node__view.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ViewedType</type>
      <name>viewed_type</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a1550f4e57532fd03b6c3e9d87805c03a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD_CTOR</type>
      <name>node_view</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a07c5e2bb77c7b6d4ce7f74a7c16ea016</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD_CTOR</type>
      <name>node_view</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a8639625133b299eff56de74a2e92c1b6</anchor>
      <arglist>(viewed_type *node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD_CTOR</type>
      <name>node_view</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>aac4f0e113706f360137d06b466129040</anchor>
      <arglist>(viewed_type &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD_CTOR</type>
      <name>node_view</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a2380162f713f1fc0e05b4c77c2b8d1b6</anchor>
      <arglist>(const node_view &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD_CTOR</type>
      <name>node_view</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>aab8677f87e6648250ef4b20dd46518a9</anchor>
      <arglist>(node_view &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>node_view &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>afa455c0337a6fe4d1ca533e10750ba9e</anchor>
      <arglist>(const node_view &amp;) &amp;noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>node_view &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a3dd8195e3971ebb2110b812783cff136</anchor>
      <arglist>(node_view &amp;&amp;) &amp;noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER</type>
      <name>operator bool</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>af0b4fdbc024dee2cf65993b7f4c21331</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER viewed_type *</type>
      <name>node</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a125767257fba92bd56cc0ccdfb94bd31</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER node_type</type>
      <name>type</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>ada50ac034b2bd0d2d26bd4122d7a9cd1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_table</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a19dcd829bae2272243e98077482aec70</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_array</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a7b832d64a351ecdc91d47be111e27dc9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_value</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>afde3b82e35f7873d71760b735a5f9585</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_string</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>ac0f4cae93380e53abe3dad6400a6d502</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_integer</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a931bc869c45c43e2953b591bf4505add</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_floating_point</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a6369104b2161c7b0b70b6f6155c24cb5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_number</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a03c3b3d8a6e7806be556f8f13306814c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_boolean</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>aced4afd5eba256eee69a0b4dd8bbdc6e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_date</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a33e930431f194b8af8a0f615b6c88e0f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_time</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>ac9dfce744788bb7ffd56d9827cec7dac</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_date_time</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a9a1231cb432f31b0d3819d7c1bf18a10</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_array_of_tables</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a4ae9da48be29ed84990119d3d754034a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a6510b628855f5f5a36073de67915b6b4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>acd79c6c68bff9648d8854178f0ef6dc0</anchor>
      <arglist>(node_type ntype, viewed_type *&amp;first_nonmatch) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a4b3ca0ef7e7db78dd8fb526467eb362f</anchor>
      <arglist>(node_type ntype) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a09c547967e6f434136c39792c229da3e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER auto *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a92898c44ec57b1d4c25b3688a17aaf9a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER auto *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a6404b1bb45ff85617684278d7498f411</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER auto *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>af2166692e239a9de74b8afb7de5dacf9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER auto *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a93e09d1635a03926073c2ce97895dcd3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER auto *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a0d07afc2a2db2076c16744ce0a07eedf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER auto *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a4d1e0365f92dd5f4a02bb4cbc308922b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER auto *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a4300ac9db0c140feb4b292da462d33fd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER auto *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a11b16e17792df6c846c4a0f3cab76412</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER auto *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>ab217e9f65611fbf1258d924e1ee5ec38</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER auto *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a728f281ba878f8c8d9cf947cf6597c81</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD optional&lt; T &gt;</type>
      <name>value_exact</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a067dd452da52d60b6abad99291ec810e</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD optional&lt; T &gt;</type>
      <name>value</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a9b18df5db92b57fbf9f78d759a465ff5</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD auto</type>
      <name>value_or</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>ac705356a68ceca156a41de173aaa2d0d</anchor>
      <arglist>(T &amp;&amp;default_value) const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto) TOML_PURE_INLINE_GETTER</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a1179d935bf6e67ff0ef5013c1d53ec5f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>aa5f84bfab779c71a07b04ca0b2db863f</anchor>
      <arglist>(Func &amp;&amp;visitor) const noexcept(visit_is_nothrow&lt; Func &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a1f56b36d52faf24302e154ebb20a33db</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>acc044bf978c2f5357c8d42451694c0dd</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>aa0ca4ba538b4cffda57699ddca7def9b</anchor>
      <arglist>(std::string_view path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>ad5ba2665f6c5417c5027e938559753af</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>afa5e6956038ae36e288ea23aa7be60f9</anchor>
      <arglist>(std::wstring_view key) const</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a472c4ef8e17c9785b98c9de832739116</anchor>
      <arglist>(std::wstring_view path) const</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a69489c34e03dcb17b550401203925768</anchor>
      <arglist>(size_t index) const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a170109f0b77888f54b2fcdb8fee0ab90</anchor>
      <arglist>(std::ostream &amp;os, const node_view &amp;nv)</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER node_type</type>
      <name>type</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>ada50ac034b2bd0d2d26bd4122d7a9cd1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_table</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a19dcd829bae2272243e98077482aec70</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_array</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a7b832d64a351ecdc91d47be111e27dc9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_value</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>afde3b82e35f7873d71760b735a5f9585</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_string</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>ac0f4cae93380e53abe3dad6400a6d502</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_integer</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a931bc869c45c43e2953b591bf4505add</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_floating_point</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a6369104b2161c7b0b70b6f6155c24cb5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_number</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a03c3b3d8a6e7806be556f8f13306814c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_boolean</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>aced4afd5eba256eee69a0b4dd8bbdc6e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_date</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a33e930431f194b8af8a0f615b6c88e0f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_time</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>ac9dfce744788bb7ffd56d9827cec7dac</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_date_time</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a9a1231cb432f31b0d3819d7c1bf18a10</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_array_of_tables</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a4ae9da48be29ed84990119d3d754034a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a6510b628855f5f5a36073de67915b6b4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>acd79c6c68bff9648d8854178f0ef6dc0</anchor>
      <arglist>(node_type ntype, viewed_type *&amp;first_nonmatch) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a4b3ca0ef7e7db78dd8fb526467eb362f</anchor>
      <arglist>(node_type ntype) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a09c547967e6f434136c39792c229da3e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER auto *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a92898c44ec57b1d4c25b3688a17aaf9a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER auto *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a6404b1bb45ff85617684278d7498f411</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER auto *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>af2166692e239a9de74b8afb7de5dacf9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER auto *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a93e09d1635a03926073c2ce97895dcd3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER auto *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a0d07afc2a2db2076c16744ce0a07eedf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER auto *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a4d1e0365f92dd5f4a02bb4cbc308922b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER auto *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a4300ac9db0c140feb4b292da462d33fd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER auto *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a11b16e17792df6c846c4a0f3cab76412</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER auto *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>ab217e9f65611fbf1258d924e1ee5ec38</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER auto *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a728f281ba878f8c8d9cf947cf6597c81</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD optional&lt; T &gt;</type>
      <name>value_exact</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a067dd452da52d60b6abad99291ec810e</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD optional&lt; T &gt;</type>
      <name>value</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a9b18df5db92b57fbf9f78d759a465ff5</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD auto</type>
      <name>value_or</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>ac705356a68ceca156a41de173aaa2d0d</anchor>
      <arglist>(T &amp;&amp;default_value) const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto) TOML_PURE_INLINE_GETTER</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a1179d935bf6e67ff0ef5013c1d53ec5f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>aa5f84bfab779c71a07b04ca0b2db863f</anchor>
      <arglist>(Func &amp;&amp;visitor) const noexcept(visit_is_nothrow&lt; Func &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_GETTER friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a62ff3a87afb2aeb16969a038f14ee827</anchor>
      <arglist>(const node_view &amp;lhs, const node_view&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_GETTER friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>af8f258ddd149e2aa9ebe3a5a2e8970d2</anchor>
      <arglist>(const node_view &amp;lhs, const node_view&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_NODISCARD friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a77ed4b3ec7e45eb4059f1ee7e3669783</anchor>
      <arglist>(const node_view &amp;lhs, const table &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>const node_view &amp;const true table TOML_NODISCARD friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>af2f339d0bd4e289d6ffa7238318a1b54</anchor>
      <arglist>(const node_view &amp;lhs, const array &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>const node_view &amp;const true array TOML_NODISCARD friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a250d01ad2066c590b8e2fda9d5a3087b</anchor>
      <arglist>(const node_view &amp;lhs, const toml::value&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_NODISCARD friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>ac41632fcd215079def6d1ec9e5b3645a</anchor>
      <arglist>(const node_view &amp;lhs, const std::initializer_list&lt; T &gt; &amp;rhs) noexcept(!impl::is_wide_string&lt; T &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>const node_view &amp;const true std::initializer_list&lt; T &gt; TOML_NODISCARD friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>ad9445c4122b8a63066cb0af40aa8138d</anchor>
      <arglist>(const node_view &amp;lhs, const std::vector&lt; T &gt; &amp;rhs) noexcept(!impl::is_wide_string&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>const node_view &amp;const true toml::value&lt; T &gt;</type>
      <name>TOML_CONSTRAINED_TEMPLATE</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a942dc292a533050d922543436b99fc9b</anchor>
      <arglist>(impl::is_losslessly_convertible_to_native&lt; T &gt;, typename T) TOML_NODISCARD friend bool operator</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a1f56b36d52faf24302e154ebb20a33db</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>acc044bf978c2f5357c8d42451694c0dd</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>aa0ca4ba538b4cffda57699ddca7def9b</anchor>
      <arglist>(std::string_view path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>ad5ba2665f6c5417c5027e938559753af</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>afa5e6956038ae36e288ea23aa7be60f9</anchor>
      <arglist>(std::wstring_view key) const</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a472c4ef8e17c9785b98c9de832739116</anchor>
      <arglist>(std::wstring_view path) const</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a69489c34e03dcb17b550401203925768</anchor>
      <arglist>(size_t index) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>toml::parse_error</name>
    <filename>classtoml_1_1parse__error.html</filename>
    <base>std::runtime_error</base>
  </compound>
  <compound kind="class">
    <name>toml::parse_result</name>
    <filename>classtoml_1_1parse__result.html</filename>
    <member kind="function">
      <type>TOML_NODISCARD_CTOR</type>
      <name>parse_result</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a0fe284eede007611fb3c4655b4161431</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD_CTOR</type>
      <name>parse_result</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a047485448128a6a503fa1e73e84d6a42</anchor>
      <arglist>(parse_result &amp;&amp;res) noexcept</arglist>
    </member>
    <member kind="function">
      <type>parse_result &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>aa4c2c770a8d214f9d508582233ff1d84</anchor>
      <arglist>(parse_result &amp;&amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~parse_result</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>ad9e22f09854af4c36860d61e0c0f25b1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD bool</type>
      <name>succeeded</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a10e3fce531df4cabaaea1989ba60d4ac</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD bool</type>
      <name>failed</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>acd7ed447dcb9cb0b96098643a8ce4ffb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD</type>
      <name>operator bool</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a461a0bcd0e5cafc6ea5efb342926a4bc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD toml::table &amp;</type>
      <name>table</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a1b3cd1afc39019d174f0b0a4d1498fe1</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD toml::table &amp;&amp;</type>
      <name>table</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a184ee0a55e99af57cb71c689b495c61e</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TOML_NODISCARD toml::table &amp;</type>
      <name>table</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a992cd86aa3ba8d1c9def46eeb52df9dc</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD</type>
      <name>operator toml::table &amp;</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a24ab7e9b59acb9b4dbecea14932bd8a7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD</type>
      <name>operator toml::table &amp;&amp;</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a8635be7d5588f603eb4322131245501b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD</type>
      <name>operator const toml::table &amp;</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a1d4f125e2f10b6ecf8f1dee55e4c922d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD parse_error &amp;</type>
      <name>error</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a3e0b2f0ef54bbc8491cb7fcd977bde7a</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD parse_error &amp;&amp;</type>
      <name>error</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a7c5c934c2e651856a43520382d6e81e3</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TOML_NODISCARD parse_error &amp;</type>
      <name>error</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a790155260b74b6574c2c83ed36fa5532</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD</type>
      <name>operator parse_error &amp;</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a9b29374524411ef17576044d9df2f1ec</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD</type>
      <name>operator parse_error &amp;&amp;</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>adb510f20cd8fe6f2696cd7052f5da1d8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD</type>
      <name>operator const parse_error &amp;</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a6caef9142b0e9a0a995871a4c63235f6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>adc925f7c56dc9565a5f8d6ecfd58f745</anchor>
      <arglist>(std::string_view path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a637316641d4af736ef727279e7d22e87</anchor>
      <arglist>(std::string_view path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a32489ee1d14955b9c9ce50abdb004466</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a3a4aa15b2648c3f22d7d67bd55ac491e</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>acd20bec8065b1aed6ca1c9739653dea7</anchor>
      <arglist>(std::wstring_view path)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a28e1ed423b3c6ca7a1e97cc1c2a4ceef</anchor>
      <arglist>(std::wstring_view path) const</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>aa06e35e4289dc12ede8549760651f93a</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a04188e3c00fadb0a89f9a7a147245262</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a4d715d66a7186347c598619cecec4cdf</anchor>
      <arglist>(std::string_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>acbe344fc851fc0d2f29667675f6344fe</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a7e27ace669a33b6e533a48d04e8a4964</anchor>
      <arglist>(std::wstring_view key)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a7d5002606469cfa0bf22543dd0ae630c</anchor>
      <arglist>(std::wstring_view key) const</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>ad4eaa8dc3cc144a912a63d9f95331572</anchor>
      <arglist>(std::ostream &amp;os, const parse_result &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD bool</type>
      <name>succeeded</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a10e3fce531df4cabaaea1989ba60d4ac</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD bool</type>
      <name>failed</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>acd7ed447dcb9cb0b96098643a8ce4ffb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD</type>
      <name>operator bool</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a461a0bcd0e5cafc6ea5efb342926a4bc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD toml::table &amp;</type>
      <name>table</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a1b3cd1afc39019d174f0b0a4d1498fe1</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD toml::table &amp;&amp;</type>
      <name>table</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a184ee0a55e99af57cb71c689b495c61e</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TOML_NODISCARD toml::table &amp;</type>
      <name>table</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a992cd86aa3ba8d1c9def46eeb52df9dc</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD</type>
      <name>operator toml::table &amp;</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a24ab7e9b59acb9b4dbecea14932bd8a7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD</type>
      <name>operator toml::table &amp;&amp;</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a8635be7d5588f603eb4322131245501b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD</type>
      <name>operator const toml::table &amp;</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a1d4f125e2f10b6ecf8f1dee55e4c922d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD parse_error &amp;</type>
      <name>error</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a3e0b2f0ef54bbc8491cb7fcd977bde7a</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD parse_error &amp;&amp;</type>
      <name>error</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a7c5c934c2e651856a43520382d6e81e3</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TOML_NODISCARD parse_error &amp;</type>
      <name>error</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a790155260b74b6574c2c83ed36fa5532</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD</type>
      <name>operator parse_error &amp;</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a9b29374524411ef17576044d9df2f1ec</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD</type>
      <name>operator parse_error &amp;&amp;</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>adb510f20cd8fe6f2696cd7052f5da1d8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD</type>
      <name>operator const parse_error &amp;</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a6caef9142b0e9a0a995871a4c63235f6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="typedef">
      <type>table_iterator</type>
      <name>iterator</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>aae503c11e9f9162de5cbef5e2c9f4863</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_table_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>abf92ffb48c1f4d0f129f4032708d4ab0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD table_iterator</type>
      <name>begin</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>afd74c4ca5265cf8cb4a702898948665c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD const_table_iterator</type>
      <name>begin</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>ab1c6ee5a3f596919fa5835671494b76b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD const_table_iterator</type>
      <name>cbegin</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a6c612d69445c9086efcde4612edf7742</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD table_iterator</type>
      <name>end</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a7fece677ce58dc5a9a388d6851014815</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD const_table_iterator</type>
      <name>end</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a55ae0a43476fc3b9a47cd70dae1d698c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD const_table_iterator</type>
      <name>cend</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a7a7f60164a585a2ab3df1d0e97c43e0d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>adc925f7c56dc9565a5f8d6ecfd58f745</anchor>
      <arglist>(std::string_view path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a637316641d4af736ef727279e7d22e87</anchor>
      <arglist>(std::string_view path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a32489ee1d14955b9c9ce50abdb004466</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a3a4aa15b2648c3f22d7d67bd55ac491e</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>acd20bec8065b1aed6ca1c9739653dea7</anchor>
      <arglist>(std::wstring_view path)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a28e1ed423b3c6ca7a1e97cc1c2a4ceef</anchor>
      <arglist>(std::wstring_view path) const</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>aa06e35e4289dc12ede8549760651f93a</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a04188e3c00fadb0a89f9a7a147245262</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a4d715d66a7186347c598619cecec4cdf</anchor>
      <arglist>(std::string_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>acbe344fc851fc0d2f29667675f6344fe</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a7e27ace669a33b6e533a48d04e8a4964</anchor>
      <arglist>(std::wstring_view key)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a7d5002606469cfa0bf22543dd0ae630c</anchor>
      <arglist>(std::wstring_view key) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>toml::path</name>
    <filename>classtoml_1_1path.html</filename>
    <member kind="function">
      <type>TOML_NODISCARD_CTOR</type>
      <name>path</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a404439f1e425197fdf366106a14bfa35</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD_CTOR</type>
      <name>path</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a26ac437c2d3afd3d097accf8b8d9ddab</anchor>
      <arglist>(std::string_view)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD_CTOR</type>
      <name>path</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a7c9e225097d4f07af33865f75a076038</anchor>
      <arglist>(std::wstring_view)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~path</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>ad585b73db97202e2b4841a64773046e5</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD_CTOR</type>
      <name>path</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>ad452f2bab2165b6a7df5ce47413e98af</anchor>
      <arglist>(const path &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD_CTOR</type>
      <name>path</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>ace6a48a9e29cc3d6b303862752014d05</anchor>
      <arglist>(path &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER size_t</type>
      <name>size</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>afffcedd5c40bfd24eba008ed6f3009b5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER</type>
      <name>operator bool</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>aa48d1ab227288fd6e1c04c934faa180d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER bool</type>
      <name>empty</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>aa887e0a092a8a7337adeebb569b0f9b1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER path_component &amp;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a38a60c9d463574b3f4ec75a8a6d287c9</anchor>
      <arglist>(size_t index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TOML_PURE_INLINE_GETTER path_component &amp;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a639b953f0fa1b12cfee68d2253730b83</anchor>
      <arglist>(size_t index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a660ab69db8a42b622bbf623d58397da4</anchor>
      <arglist>(const path &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a630751521383d7072a580a9b8e1e3f4f</anchor>
      <arglist>(path &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>af5da17b2697b6d93ed6a111b7a05f569</anchor>
      <arglist>(std::string_view)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a50ed97223baadcbf26f4c2311394c04b</anchor>
      <arglist>(std::wstring_view)</arglist>
    </member>
    <member kind="function">
      <type>TOML_ALWAYS_INLINE path &amp;</type>
      <name>assign</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a8848b96b5f746f416e317d0e72402e2f</anchor>
      <arglist>(const path &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>TOML_ALWAYS_INLINE path &amp;</type>
      <name>assign</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>af2b87d08be8de600050cf3a84dc7eecd</anchor>
      <arglist>(path &amp;&amp;p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_ALWAYS_INLINE path &amp;</type>
      <name>assign</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>abf63489c969acc500b7a6378b1549fdd</anchor>
      <arglist>(std::string_view str)</arglist>
    </member>
    <member kind="function">
      <type>TOML_ALWAYS_INLINE path &amp;</type>
      <name>assign</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>af2df309292e59b9b0351738c24680370</anchor>
      <arglist>(std::wstring_view str)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>operator+=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>aabc9213e26b1db7d87fbfc504e39695f</anchor>
      <arglist>(const path &amp;)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>operator+=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a4eeaed05f49c2b9017bef230754f3777</anchor>
      <arglist>(path &amp;&amp;)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>operator+=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a71085a959e83687873f72aeffe03a242</anchor>
      <arglist>(std::string_view)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>operator+=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a834f7fe3bfb77ca19faccf5394c4b381</anchor>
      <arglist>(std::wstring_view)</arglist>
    </member>
    <member kind="function">
      <type>TOML_ALWAYS_INLINE path &amp;</type>
      <name>append</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>ad64db57c72cc189f7aa3d736f1617bf4</anchor>
      <arglist>(const path &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>TOML_ALWAYS_INLINE path &amp;</type>
      <name>append</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>abe4887501e4704e6fbbc23c4936f1d76</anchor>
      <arglist>(path &amp;&amp;p)</arglist>
    </member>
    <member kind="function">
      <type>TOML_ALWAYS_INLINE path &amp;</type>
      <name>append</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a16c2d22c03233b713e3438990ffa927f</anchor>
      <arglist>(std::string_view str)</arglist>
    </member>
    <member kind="function">
      <type>TOML_ALWAYS_INLINE path &amp;</type>
      <name>append</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a7849bfdbac540324666da4ac3a6b93c0</anchor>
      <arglist>(std::wstring_view str)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>prepend</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>acf3f8ebc882216590047e0fd9ca679e2</anchor>
      <arglist>(const path &amp;)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>prepend</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>ac0ea4613a8ce311699284d22753a966c</anchor>
      <arglist>(path &amp;&amp;)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>prepend</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a97cca814a51b425e1baf310d5672fbe4</anchor>
      <arglist>(std::string_view)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>prepend</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>aa30721d1f0b21c4d42176063dd7ad08a</anchor>
      <arglist>(std::wstring_view)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a109a0d82839904cd0808388023305dc4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>truncate</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>aa4140e7e34e06546d509335037d1101b</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD path</type>
      <name>truncated</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>aea56433ad4e7bd0a0642dd1c0374d21f</anchor>
      <arglist>(size_t n) const</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD path</type>
      <name>parent</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>ad8e63d247e6ac55efe207dbfcfd0632e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD path</type>
      <name>leaf</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a01160294c8faa4db595dd7a0d0912f02</anchor>
      <arglist>(size_t n=1) const</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD path</type>
      <name>subpath</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a1265e8aba6dc60bc5ffe8399b1eeb645</anchor>
      <arglist>(const_iterator start, const_iterator end) const</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD path</type>
      <name>subpath</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>ae9ae31945d214dfbe684c4354f2324e7</anchor>
      <arglist>(size_t start, size_t length) const</arglist>
    </member>
    <member kind="friend">
      <type>TOML_NODISCARD friend path</type>
      <name>operator+</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>ad5e5060120620271acb20e8a74f2021f</anchor>
      <arglist>(const path &amp;lhs, const path &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>TOML_NODISCARD friend path</type>
      <name>operator+</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a48d54d0f3eb9f644a45102ee73f1cff5</anchor>
      <arglist>(const path &amp;lhs, std::string_view rhs)</arglist>
    </member>
    <member kind="friend">
      <type>TOML_NODISCARD friend path</type>
      <name>operator+</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a512781b98cad27ab8c8a59b110485fee</anchor>
      <arglist>(std::string_view lhs, const path &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>TOML_NODISCARD friend path</type>
      <name>operator+</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a991f68ea1c70885c029a64bfbf445d69</anchor>
      <arglist>(const path &amp;lhs, std::wstring_view rhs)</arglist>
    </member>
    <member kind="friend">
      <type>TOML_NODISCARD friend path</type>
      <name>operator+</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a06a9534d3f26fbcd1b563c5e90b34819</anchor>
      <arglist>(std::wstring_view lhs, const path &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a1a468cbd804317b18eafbaa91c06baf8</anchor>
      <arglist>(const path &amp;lhs, const path &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a1733dc9036ef632af15486e604c4b477</anchor>
      <arglist>(const path &amp;lhs, const path &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_NODISCARD TOML_ALWAYS_INLINE friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>af5859e43bd1db2967505992d3087a193</anchor>
      <arglist>(const path &amp;lhs, std::string_view rhs)</arglist>
    </member>
    <member kind="friend">
      <type>TOML_NODISCARD TOML_ALWAYS_INLINE friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>ab673764882b72f84b82f34f51beeea6f</anchor>
      <arglist>(std::string_view lhs, const path &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>TOML_NODISCARD TOML_ALWAYS_INLINE friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a17adb560b17accb885ba871f492e45f2</anchor>
      <arglist>(const path &amp;lhs, std::string_view rhs)</arglist>
    </member>
    <member kind="friend">
      <type>TOML_NODISCARD TOML_ALWAYS_INLINE friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a0577876d473c22d81b5e3f6e519af57c</anchor>
      <arglist>(std::string_view lhs, const path &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>TOML_NODISCARD TOML_ALWAYS_INLINE friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>adb6aa7f1b9da69aac8853c17568130dd</anchor>
      <arglist>(const path &amp;lhs, std::wstring_view rhs)</arglist>
    </member>
    <member kind="friend">
      <type>TOML_NODISCARD TOML_ALWAYS_INLINE friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>aee32429464d115ed5e67d0332ddb8fc6</anchor>
      <arglist>(std::wstring_view lhs, const path &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>TOML_NODISCARD TOML_ALWAYS_INLINE friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>ac3a98d28d7b1e94834ac73759a7789ec</anchor>
      <arglist>(const path &amp;lhs, std::wstring_view rhs)</arglist>
    </member>
    <member kind="friend">
      <type>TOML_NODISCARD TOML_ALWAYS_INLINE friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a5b024dec835f174a68a456a2da2f8d6d</anchor>
      <arglist>(std::wstring_view lhs, const path &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a660ab69db8a42b622bbf623d58397da4</anchor>
      <arglist>(const path &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a630751521383d7072a580a9b8e1e3f4f</anchor>
      <arglist>(path &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>af5da17b2697b6d93ed6a111b7a05f569</anchor>
      <arglist>(std::string_view)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a50ed97223baadcbf26f4c2311394c04b</anchor>
      <arglist>(std::wstring_view)</arglist>
    </member>
    <member kind="function">
      <type>TOML_ALWAYS_INLINE path &amp;</type>
      <name>assign</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a8848b96b5f746f416e317d0e72402e2f</anchor>
      <arglist>(const path &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>TOML_ALWAYS_INLINE path &amp;</type>
      <name>assign</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>af2b87d08be8de600050cf3a84dc7eecd</anchor>
      <arglist>(path &amp;&amp;p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_ALWAYS_INLINE path &amp;</type>
      <name>assign</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>abf63489c969acc500b7a6378b1549fdd</anchor>
      <arglist>(std::string_view str)</arglist>
    </member>
    <member kind="function">
      <type>TOML_ALWAYS_INLINE path &amp;</type>
      <name>assign</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>af2df309292e59b9b0351738c24680370</anchor>
      <arglist>(std::wstring_view str)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>operator+=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>aabc9213e26b1db7d87fbfc504e39695f</anchor>
      <arglist>(const path &amp;)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>operator+=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a4eeaed05f49c2b9017bef230754f3777</anchor>
      <arglist>(path &amp;&amp;)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>operator+=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a71085a959e83687873f72aeffe03a242</anchor>
      <arglist>(std::string_view)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>operator+=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a834f7fe3bfb77ca19faccf5394c4b381</anchor>
      <arglist>(std::wstring_view)</arglist>
    </member>
    <member kind="function">
      <type>TOML_ALWAYS_INLINE path &amp;</type>
      <name>append</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>ad64db57c72cc189f7aa3d736f1617bf4</anchor>
      <arglist>(const path &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>TOML_ALWAYS_INLINE path &amp;</type>
      <name>append</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>abe4887501e4704e6fbbc23c4936f1d76</anchor>
      <arglist>(path &amp;&amp;p)</arglist>
    </member>
    <member kind="function">
      <type>TOML_ALWAYS_INLINE path &amp;</type>
      <name>append</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a16c2d22c03233b713e3438990ffa927f</anchor>
      <arglist>(std::string_view str)</arglist>
    </member>
    <member kind="function">
      <type>TOML_ALWAYS_INLINE path &amp;</type>
      <name>append</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a7849bfdbac540324666da4ac3a6b93c0</anchor>
      <arglist>(std::wstring_view str)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>prepend</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>acf3f8ebc882216590047e0fd9ca679e2</anchor>
      <arglist>(const path &amp;)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>prepend</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>ac0ea4613a8ce311699284d22753a966c</anchor>
      <arglist>(path &amp;&amp;)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>prepend</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a97cca814a51b425e1baf310d5672fbe4</anchor>
      <arglist>(std::string_view)</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>prepend</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>aa30721d1f0b21c4d42176063dd7ad08a</anchor>
      <arglist>(std::wstring_view)</arglist>
    </member>
    <member kind="friend">
      <type>TOML_NODISCARD friend path</type>
      <name>operator+</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>ad5e5060120620271acb20e8a74f2021f</anchor>
      <arglist>(const path &amp;lhs, const path &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>TOML_NODISCARD friend path</type>
      <name>operator+</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a48d54d0f3eb9f644a45102ee73f1cff5</anchor>
      <arglist>(const path &amp;lhs, std::string_view rhs)</arglist>
    </member>
    <member kind="friend">
      <type>TOML_NODISCARD friend path</type>
      <name>operator+</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a512781b98cad27ab8c8a59b110485fee</anchor>
      <arglist>(std::string_view lhs, const path &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>TOML_NODISCARD friend path</type>
      <name>operator+</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a991f68ea1c70885c029a64bfbf445d69</anchor>
      <arglist>(const path &amp;lhs, std::wstring_view rhs)</arglist>
    </member>
    <member kind="friend">
      <type>TOML_NODISCARD friend path</type>
      <name>operator+</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a06a9534d3f26fbcd1b563c5e90b34819</anchor>
      <arglist>(std::wstring_view lhs, const path &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD std::string</type>
      <name>str</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a333fb698dd1ae78a6bf73224c4cbdcb5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD TOML_ALWAYS_INLINE</type>
      <name>operator std::string</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a6e049ca5c26474c5b966a7e371474622</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD std::wstring</type>
      <name>wide_str</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>aa60799989e68e86b8a10ebc27a0c8da5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD TOML_ALWAYS_INLINE</type>
      <name>operator std::wstring</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a0a423a19b8dd9225c3e7648e8d06ab61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>TOML_ALWAYS_INLINE friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a726d1e69b1ec16dae68939c0ef3bdd63</anchor>
      <arglist>(std::ostream &amp;os, const path &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a1a468cbd804317b18eafbaa91c06baf8</anchor>
      <arglist>(const path &amp;lhs, const path &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a1733dc9036ef632af15486e604c4b477</anchor>
      <arglist>(const path &amp;lhs, const path &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_NODISCARD TOML_ALWAYS_INLINE friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>af5859e43bd1db2967505992d3087a193</anchor>
      <arglist>(const path &amp;lhs, std::string_view rhs)</arglist>
    </member>
    <member kind="friend">
      <type>TOML_NODISCARD TOML_ALWAYS_INLINE friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>ab673764882b72f84b82f34f51beeea6f</anchor>
      <arglist>(std::string_view lhs, const path &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>TOML_NODISCARD TOML_ALWAYS_INLINE friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a17adb560b17accb885ba871f492e45f2</anchor>
      <arglist>(const path &amp;lhs, std::string_view rhs)</arglist>
    </member>
    <member kind="friend">
      <type>TOML_NODISCARD TOML_ALWAYS_INLINE friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a0577876d473c22d81b5e3f6e519af57c</anchor>
      <arglist>(std::string_view lhs, const path &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>TOML_NODISCARD TOML_ALWAYS_INLINE friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>adb6aa7f1b9da69aac8853c17568130dd</anchor>
      <arglist>(const path &amp;lhs, std::wstring_view rhs)</arglist>
    </member>
    <member kind="friend">
      <type>TOML_NODISCARD TOML_ALWAYS_INLINE friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>aee32429464d115ed5e67d0332ddb8fc6</anchor>
      <arglist>(std::wstring_view lhs, const path &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>TOML_NODISCARD TOML_ALWAYS_INLINE friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>ac3a98d28d7b1e94834ac73759a7789ec</anchor>
      <arglist>(const path &amp;lhs, std::wstring_view rhs)</arglist>
    </member>
    <member kind="friend">
      <type>TOML_NODISCARD TOML_ALWAYS_INLINE friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a5b024dec835f174a68a456a2da2f8d6d</anchor>
      <arglist>(std::wstring_view lhs, const path &amp;rhs)</arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; path_component &gt;::iterator</type>
      <name>iterator</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>ad752d8838221c179af93c94d8a7ed3d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; path_component &gt;::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>aaed31ecb434c644dc316042b744a6a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER iterator</type>
      <name>begin</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a6271886c2d382065b5727c89b7b31a85</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER iterator</type>
      <name>end</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>afcf06743a9e0438fc5c1cfd4943ff091</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER const_iterator</type>
      <name>begin</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a21b4e3d32014c3a467d1e26c63e0bfec</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER const_iterator</type>
      <name>end</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>af31aa15d788b4a9ace7ed7d0f1b6c5ce</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>ae423b1549babac2ecfd162f081a8b078</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER const_iterator</type>
      <name>cend</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a583735c1e7b0b3d94138252062a2082a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a109a0d82839904cd0808388023305dc4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>path &amp;</type>
      <name>truncate</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>aa4140e7e34e06546d509335037d1101b</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD path</type>
      <name>truncated</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>aea56433ad4e7bd0a0642dd1c0374d21f</anchor>
      <arglist>(size_t n) const</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD path</type>
      <name>parent</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>ad8e63d247e6ac55efe207dbfcfd0632e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD path</type>
      <name>leaf</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a01160294c8faa4db595dd7a0d0912f02</anchor>
      <arglist>(size_t n=1) const</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD path</type>
      <name>subpath</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>a1265e8aba6dc60bc5ffe8399b1eeb645</anchor>
      <arglist>(const_iterator start, const_iterator end) const</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD path</type>
      <name>subpath</name>
      <anchorfile>classtoml_1_1path.html</anchorfile>
      <anchor>ae9ae31945d214dfbe684c4354f2324e7</anchor>
      <arglist>(size_t start, size_t length) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>toml::path_component</name>
    <filename>classtoml_1_1path__component.html</filename>
    <member kind="function">
      <type>TOML_NODISCARD_CTOR</type>
      <name>path_component</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>afea1d2a0a0b810e97e55d5debd947de8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD_CTOR</type>
      <name>path_component</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>a57cd66be6e1b3266bd4439e606e9462c</anchor>
      <arglist>(size_t index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD_CTOR</type>
      <name>path_component</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>a147517343af4ed401a67395b0ee5cd2b</anchor>
      <arglist>(std::string_view key)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD_CTOR</type>
      <name>path_component</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>a153ef17c7051b5c19c6c852a41222724</anchor>
      <arglist>(std::wstring_view key)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD_CTOR</type>
      <name>path_component</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>ad05bfaa47b1272b5e4336d28bf09c7cb</anchor>
      <arglist>(const path_component &amp;pc)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD_CTOR</type>
      <name>path_component</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>a92f88107948ccb8243642f46ca8099b9</anchor>
      <arglist>(path_component &amp;&amp;pc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>path_component &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>aa32a4eef434a839c7379e5c9a734be42</anchor>
      <arglist>(const path_component &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>path_component &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>a2a9f790c3f54919bbeb6617d27df8dbf</anchor>
      <arglist>(path_component &amp;&amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>path_component &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>a8a1c7128de9bde5c4e17037a827fe050</anchor>
      <arglist>(size_t new_index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>path_component &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>a6f6d6747a56a2480608654f682816df2</anchor>
      <arglist>(std::string_view new_key)</arglist>
    </member>
    <member kind="function">
      <type>path_component &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>a16ae3aa3861f989a6aa6ec7d5f7533f6</anchor>
      <arglist>(std::wstring_view new_key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~path_component</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>a9023bc344bbf001fb54661491d52ed21</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER path_component_type</type>
      <name>type</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>a1db8bc011af7ea166a421aeb6a20c518</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER size_t</type>
      <name>index</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>a8bf7767700a3da705371c3a87d837a2a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER</type>
      <name>operator size_t</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>a0e04c3a36c96d54bc87cee03566298fa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TOML_PURE_GETTER std::string &amp;</type>
      <name>key</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>a5c521f86bb930466d2b308134871a744</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER</type>
      <name>operator const std::string &amp;</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>aeb7eeb02c819be99f4f40a1e155ae9eb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>a48922fdad9f293b0292e7af6b6ab2895</anchor>
      <arglist>(const path_component &amp;lhs, const path_component &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>a586e016a0434ffdcc6309ba031c29893</anchor>
      <arglist>(const path_component &amp;lhs, const path_component &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER size_t</type>
      <name>index</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>a8bf7767700a3da705371c3a87d837a2a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER</type>
      <name>operator size_t</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>a0e04c3a36c96d54bc87cee03566298fa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TOML_PURE_GETTER std::string &amp;</type>
      <name>key</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>a5c521f86bb930466d2b308134871a744</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER</type>
      <name>operator const std::string &amp;</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>aeb7eeb02c819be99f4f40a1e155ae9eb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>a48922fdad9f293b0292e7af6b6ab2895</anchor>
      <arglist>(const path_component &amp;lhs, const path_component &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1path__component.html</anchorfile>
      <anchor>a586e016a0434ffdcc6309ba031c29893</anchor>
      <arglist>(const path_component &amp;lhs, const path_component &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>toml::source_position</name>
    <filename>structtoml_1_1source__position.html</filename>
    <member kind="function">
      <type>constexpr</type>
      <name>operator bool</name>
      <anchorfile>structtoml_1_1source__position.html</anchorfile>
      <anchor>accba2f34a07d8b453b8f2f6baf2d73cf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>source_index</type>
      <name>line</name>
      <anchorfile>structtoml_1_1source__position.html</anchorfile>
      <anchor>ab21cac59798d70e25fe97ac7433763cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>source_index</type>
      <name>column</name>
      <anchorfile>structtoml_1_1source__position.html</anchorfile>
      <anchor>a1ca6d0db40c69d2784703011f7cf5434</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>structtoml_1_1source__position.html</anchorfile>
      <anchor>a2661adb822c0291c5328d9d00e4b9a8f</anchor>
      <arglist>(const source_position &amp;lhs, const source_position &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>structtoml_1_1source__position.html</anchorfile>
      <anchor>a90fec8fa1014a1358a362f9171cdb073</anchor>
      <arglist>(const source_position &amp;lhs, const source_position &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>structtoml_1_1source__position.html</anchorfile>
      <anchor>a771714902fb113445597a1fd2a24e8cd</anchor>
      <arglist>(const source_position &amp;lhs, const source_position &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structtoml_1_1source__position.html</anchorfile>
      <anchor>abb7d47c85374301ec48e7c5f3ee1c71a</anchor>
      <arglist>(const source_position &amp;lhs, const source_position &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>structtoml_1_1source__position.html</anchorfile>
      <anchor>a6050abda53e8d371cf328179ef70a1f7</anchor>
      <arglist>(const source_position &amp;lhs, const source_position &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structtoml_1_1source__position.html</anchorfile>
      <anchor>a14386eeea63b71de792b8a752ee5d4df</anchor>
      <arglist>(const source_position &amp;lhs, const source_position &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structtoml_1_1source__position.html</anchorfile>
      <anchor>a40b4b23ccd23a205a2c2298853066aba</anchor>
      <arglist>(std::ostream &amp;lhs, const source_position &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>toml::source_region</name>
    <filename>structtoml_1_1source__region.html</filename>
    <member kind="function">
      <type>optional&lt; std::wstring &gt;</type>
      <name>wide_path</name>
      <anchorfile>structtoml_1_1source__region.html</anchorfile>
      <anchor>a8e9110cd42e834f95e9a12c59909c1c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>source_position</type>
      <name>begin</name>
      <anchorfile>structtoml_1_1source__region.html</anchorfile>
      <anchor>ab36a5db15201864a13fb628f331196d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>source_position</type>
      <name>end</name>
      <anchorfile>structtoml_1_1source__region.html</anchorfile>
      <anchor>a054940b42dcf83391697ec2b8690531d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>source_path_ptr</type>
      <name>path</name>
      <anchorfile>structtoml_1_1source__region.html</anchorfile>
      <anchor>a25fc23f579edb8afc0818c013c5ac5d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structtoml_1_1source__region.html</anchorfile>
      <anchor>a9de8ac24a607abd098bb4179520f3734</anchor>
      <arglist>(std::ostream &amp;lhs, const source_region &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>toml::table</name>
    <filename>classtoml_1_1table.html</filename>
    <base>toml::node</base>
    <member kind="function">
      <type></type>
      <name>table</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a823f0d3385d2d8d8320a72f78c677a35</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a8c06941e05e31602d46f26ba84d14b23</anchor>
      <arglist>(const table &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ab47a76ab242afa13f1a74e5e2bcded44</anchor>
      <arglist>(table &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a7fdc52c0aa1bd67ae6738f029787bc2f</anchor>
      <arglist>(std::initializer_list&lt; impl::table_init_pair &gt; kvps)</arglist>
    </member>
    <member kind="function">
      <type>table &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ac4bdf5ade95ac5afa472ae1219b8b89d</anchor>
      <arglist>(const table &amp;)</arglist>
    </member>
    <member kind="function">
      <type>table &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a5c5fd0e11db828ab264eccc96dfdd619</anchor>
      <arglist>(table &amp;&amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_type</type>
      <name>type</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a03d15150652176b1714b70fb035cdeb0</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>abe1cc42533dc108b2062de2666471faa</anchor>
      <arglist>(node_type ntype) const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>af1a2f48edbb3afa9363c392595830846</anchor>
      <arglist>(node_type ntype, node *&amp;first_nonmatch) noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a8a0a8d4e44883a2467798dad07ddcb43</anchor>
      <arglist>(node_type ntype, const node *&amp;first_nonmatch) const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_table</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a2cdfa1fd3e9d5c64cb5d4089a1d4344e</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a56d186a17d8e24bfa90fa6578e7b3872</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array_of_tables</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a52e6d4f667e464a49ac4928c8ed31fec</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_value</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aae222bf8089461dd4954311d1e403386</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_string</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a6bf5f3666709891c5c6beba70835604a</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_integer</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a1a8b05c8de343cff20b47189d309862b</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_floating_point</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a6eafaab181b8ce2632b5c0556941fb76</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_number</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a89392000e892868540f0513f4be45ba2</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_boolean</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a60c4177e5d411c2f8be30f0b99b68189</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_date</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a3052f7b2bce6add8ef50ea77c59338c4</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_time</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a1fc645d975ce2b07348e1e9f8029d0c1</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_date_time</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a38d82efe9d6fc89b5140e5abdde9127d</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>table *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>af9cb47ecee9c13ded1308b64902f8a5c</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>array *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a673bdcac9903b7da00c5893f6d7fe8e0</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; std::string &gt; *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aa8e3920bff569dee33fe8e34ffb6361d</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; int64_t &gt; *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a5b86281620ba34efabf7e3c4bef9675b</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; double &gt; *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ac3b5e969c4aaeebc3c36d514c3b54d5f</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; bool &gt; *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a0cd6412f40c200939645028417d789cf</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; date &gt; *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a1b5f7025e387eb10f16d4b3a763db501</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; time &gt; *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a980f61149308e193282b8f5bfaeda284</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; date_time &gt; *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a6a33617f7d6d95ef676ce0cb098d2970</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const table *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a84fc8b87acc1f9f86384d375893f5d3c</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const array *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>af2dda58dc42b782b0c36a2367d948957</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; std::string &gt; *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aa8ab32e1b60f5b3b0bf9539076c89acc</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; int64_t &gt; *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a98c296e8a635190bab97e886c83f2648</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; double &gt; *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aaf302e3edd84df4c31765ffb15aed0f2</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; bool &gt; *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>abc2f126a04989073083065662df9e72b</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; date &gt; *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a5759fb6852495964827f9982e9c8ce12</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; time &gt; *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a19e3aa65fd09b2f36d98627c432638b1</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; date_time &gt; *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a2fd53fcb036c335021e3ad098cf4d883</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_inline</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a53be1b93aa90608ed378323df835a2f3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>is_inline</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a8e797a683ff2bacd14d7e7461ecd2780</anchor>
      <arglist>(bool val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node *</type>
      <name>get</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ae6811ea7c692ac71880693e225c66aed</anchor>
      <arglist>(std::string_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const node *</type>
      <name>get</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a43afae4f760f715c69b0b8aa0a7ef071</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node *</type>
      <name>get</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a637ff9b8eb2880a1084f01b7b0725b12</anchor>
      <arglist>(std::wstring_view key)</arglist>
    </member>
    <member kind="function">
      <type>const node *</type>
      <name>get</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>add0f0c51c63d385f881022cab988744c</anchor>
      <arglist>(std::wstring_view key) const</arglist>
    </member>
    <member kind="function">
      <type>impl::wrap_node&lt; T &gt; *</type>
      <name>get_as</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>afb960c9b2ea8066f917d22d348758513</anchor>
      <arglist>(std::string_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const impl::wrap_node&lt; T &gt; *</type>
      <name>get_as</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aa21b91ee2ed48b24bf684b762f01c684</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::wrap_node&lt; T &gt; *</type>
      <name>get_as</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a32bfcd190cb9a8e06f381097a23d0b66</anchor>
      <arglist>(std::wstring_view key)</arglist>
    </member>
    <member kind="function">
      <type>const impl::wrap_node&lt; T &gt; *</type>
      <name>get_as</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a0099ccf5df2f15ca17309c1897cb5e61</anchor>
      <arglist>(std::wstring_view key) const</arglist>
    </member>
    <member kind="function">
      <type>node &amp;</type>
      <name>at</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ae1e3925fca9b027958934a5c015c6c98</anchor>
      <arglist>(std::string_view key)</arglist>
    </member>
    <member kind="function">
      <type>const node &amp;</type>
      <name>at</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>acadf9153fcdc5019add35426044f369e</anchor>
      <arglist>(std::string_view key) const</arglist>
    </member>
    <member kind="function">
      <type>node &amp;</type>
      <name>at</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aef4d6369cf64a56322b96f1a15f761c6</anchor>
      <arglist>(std::wstring_view key)</arglist>
    </member>
    <member kind="function">
      <type>const node &amp;</type>
      <name>at</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ae8429bf4d0d3dd15b82344b575ec2a15</anchor>
      <arglist>(std::wstring_view key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a554f495f6f2ebc993be1bd0379447051</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ad7c4105854cc817bf6e781fa7fb1b6d6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>lower_bound</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>acc5180d0f3b1a78f45962f246a5d9605</anchor>
      <arglist>(std::string_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>lower_bound</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a3b678ac60d00790308b96f5e51da4274</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>lower_bound</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aaaffca1b5d53d7b72d2f29c14f06d75e</anchor>
      <arglist>(std::wstring_view key)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>lower_bound</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a2799383d484028ef5f466f8d1d34f315</anchor>
      <arglist>(std::wstring_view key) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a087ecb9d9fd4562d79f83341f0c643c0</anchor>
      <arglist>(std::string_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a65a894481bab5dd2bd00690931ed2692</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aacf6efa6e7865211f7a1283f79a88ee0</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ab1f12a827212d23ee0895fda92a5113c</anchor>
      <arglist>(std::wstring_view key)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a25f8f4a8c4672042d75b810856bd676f</anchor>
      <arglist>(std::wstring_view key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a7bec8d45353adeac918668a9fc5cb6a2</anchor>
      <arglist>(std::wstring_view key) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a1a90984876ccdd03aaa9e0f9801a839f</anchor>
      <arglist>(iterator pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a4dafb4ae116d92add973e5f27f880a9d</anchor>
      <arglist>(const_iterator pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a59f4dd9e42b73c9c1ec43134bef7e113</anchor>
      <arglist>(const_iterator begin, const_iterator end) noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ac6064df3f6f23b022884390a9963c1bc</anchor>
      <arglist>(std::string_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>add732807ee5e8fde81ceaa33acbaa7c6</anchor>
      <arglist>(std::wstring_view key)</arglist>
    </member>
    <member kind="function">
      <type>table &amp;</type>
      <name>prune</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a7f4d1d90dcea74d84f70db7e2d70c78a</anchor>
      <arglist>(bool recursive=true) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>table &amp;&amp;</type>
      <name>prune</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a14a59eed720b4d01840e290f82bb87b5</anchor>
      <arglist>(bool recursive=true) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aa710f85c588a1b00c3192d1553de4eef</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>emplace_hint</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a0d2378b5d13432bf8e325c388c650189</anchor>
      <arglist>(const_iterator hint, KeyType &amp;&amp;key, ValueArgs &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>insert</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aed4c994aec5209b69d54d19f306b31bc</anchor>
      <arglist>(KeyType &amp;&amp;key, ValueType &amp;&amp;val, value_flags flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a331eb6de04d95c3f76bf64e6f84d4ad6</anchor>
      <arglist>(Iter begin, Iter end, value_flags flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>insert_or_assign</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aa160b71ed6bc6fc638b19b5d9a8ef569</anchor>
      <arglist>(KeyType &amp;&amp;key, ValueType &amp;&amp;val, value_flags flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>emplace</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a485d7763c578d716b4f22abb1db3c975</anchor>
      <arglist>(KeyType &amp;&amp;key, ValueArgs &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a6d8386049f630c8551597a2180479c7c</anchor>
      <arglist>(std::string_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a9b13a19ddfcd2f76685f57587d28701c</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a706215b69aefbcc303e2882341c766eb</anchor>
      <arglist>(std::wstring_view key)</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a5c4132e9936b1d6b0d9f2ccda7417fd7</anchor>
      <arglist>(std::wstring_view key) const</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a3d8aefefc9701472d2a314a43deba6d2</anchor>
      <arglist>(std::ostream &amp;lhs, const table &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>af8ebaed8105e5de2098992764f2d534a</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>abdeb5d9d9fc23c031c78e544c6196ea6</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa94b031f02a932c90beb70896467f3e0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER bool</type>
      <name>is</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a9ecbbcf44989af503bf272214c3b943a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a42c16f19aa5bdeba64c62d500e6a07dd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TOML_PURE_INLINE_GETTER impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a98d0bc7e2b3d5bf76356bb75ef7eaded</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD optional&lt; T &gt;</type>
      <name>value_exact</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a41028c589c26e362a2eadfc34319f88f</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD optional&lt; T &gt;</type>
      <name>value</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a0537ef983c04ac04458d69817673eb64</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD auto</type>
      <name>value_or</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>af627a857a57927e3168bf2615a09e55e</anchor>
      <arglist>(T &amp;&amp;default_value) const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto) TOML_PURE_GETTER</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>af74590ffce9dbece0bfe513748946bf8</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto) TOML_PURE_GETTER</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad84b9061d3d79e98b3fd821d0b2f848f</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto) TOML_PURE_GETTER</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a93a67fe01c09c44c6efadad76b79ee0d</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto) TOML_PURE_GETTER</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a8f4542448fdb626f79c83675b90b4878</anchor>
      <arglist>() const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TOML_PURE_INLINE_GETTER source_region &amp;</type>
      <name>source</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a00fcd61d1fe6e5eff55fcc73125b203d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad47390f3832260db7bf06cd282598240</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a371a03c4b91cfbb8d9ee785c1eacf836</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad4a42e50f923b0fe1efff0a6719dab90</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac387cb04111addc0c291ecdd6f299666</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD</type>
      <name>operator node_view&lt; node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac93b48af1a887df8a7ed920feb466025</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD</type>
      <name>operator node_view&lt; const node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a5bcdd9384e6bc00070f9dbb1a10a92d5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a6fbac216f402b92a357e08bc259f70e9</anchor>
      <arglist>(std::string_view path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a670a31c35e3f2e8ffe0d622df3afcbf9</anchor>
      <arglist>(std::string_view path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a7c588b117fa0a1cecc1a74ca6b60b481</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a58a3340e6f377095c72fb85b391985ba</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a5c437295e93e6d680e984ad9c456e792</anchor>
      <arglist>(std::wstring_view path)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a4a1e58e889df8f0dcba278f532957607</anchor>
      <arglist>(std::wstring_view path) const</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a49bbc83d8ea5ee5167fb32531fd86547</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a04d5383250b06484da6fd8710e6b0c68</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_type</type>
      <name>type</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a03d15150652176b1714b70fb035cdeb0</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>abe1cc42533dc108b2062de2666471faa</anchor>
      <arglist>(node_type ntype) const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>af1a2f48edbb3afa9363c392595830846</anchor>
      <arglist>(node_type ntype, node *&amp;first_nonmatch) noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a8a0a8d4e44883a2467798dad07ddcb43</anchor>
      <arglist>(node_type ntype, const node *&amp;first_nonmatch) const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_table</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a2cdfa1fd3e9d5c64cb5d4089a1d4344e</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a56d186a17d8e24bfa90fa6578e7b3872</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array_of_tables</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a52e6d4f667e464a49ac4928c8ed31fec</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_value</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aae222bf8089461dd4954311d1e403386</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_string</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a6bf5f3666709891c5c6beba70835604a</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_integer</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a1a8b05c8de343cff20b47189d309862b</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_floating_point</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a6eafaab181b8ce2632b5c0556941fb76</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_number</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a89392000e892868540f0513f4be45ba2</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_boolean</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a60c4177e5d411c2f8be30f0b99b68189</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_date</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a3052f7b2bce6add8ef50ea77c59338c4</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_time</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a1fc645d975ce2b07348e1e9f8029d0c1</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_date_time</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a38d82efe9d6fc89b5140e5abdde9127d</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>table *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>af9cb47ecee9c13ded1308b64902f8a5c</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>array *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a673bdcac9903b7da00c5893f6d7fe8e0</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; std::string &gt; *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aa8e3920bff569dee33fe8e34ffb6361d</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; int64_t &gt; *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a5b86281620ba34efabf7e3c4bef9675b</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; double &gt; *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ac3b5e969c4aaeebc3c36d514c3b54d5f</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; bool &gt; *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a0cd6412f40c200939645028417d789cf</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; date &gt; *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a1b5f7025e387eb10f16d4b3a763db501</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; time &gt; *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a980f61149308e193282b8f5bfaeda284</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>toml::value&lt; date_time &gt; *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a6a33617f7d6d95ef676ce0cb098d2970</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const table *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a84fc8b87acc1f9f86384d375893f5d3c</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const array *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>af2dda58dc42b782b0c36a2367d948957</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; std::string &gt; *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aa8ab32e1b60f5b3b0bf9539076c89acc</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; int64_t &gt; *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a98c296e8a635190bab97e886c83f2648</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; double &gt; *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aaf302e3edd84df4c31765ffb15aed0f2</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; bool &gt; *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>abc2f126a04989073083065662df9e72b</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; date &gt; *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a5759fb6852495964827f9982e9c8ce12</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; time &gt; *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a19e3aa65fd09b2f36d98627c432638b1</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const toml::value&lt; date_time &gt; *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a2fd53fcb036c335021e3ad098cf4d883</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_inline</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a53be1b93aa90608ed378323df835a2f3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>is_inline</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a8e797a683ff2bacd14d7e7461ecd2780</anchor>
      <arglist>(bool val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node *</type>
      <name>get</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ae6811ea7c692ac71880693e225c66aed</anchor>
      <arglist>(std::string_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const node *</type>
      <name>get</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a43afae4f760f715c69b0b8aa0a7ef071</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node *</type>
      <name>get</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a637ff9b8eb2880a1084f01b7b0725b12</anchor>
      <arglist>(std::wstring_view key)</arglist>
    </member>
    <member kind="function">
      <type>const node *</type>
      <name>get</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>add0f0c51c63d385f881022cab988744c</anchor>
      <arglist>(std::wstring_view key) const</arglist>
    </member>
    <member kind="function">
      <type>impl::wrap_node&lt; T &gt; *</type>
      <name>get_as</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>afb960c9b2ea8066f917d22d348758513</anchor>
      <arglist>(std::string_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const impl::wrap_node&lt; T &gt; *</type>
      <name>get_as</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aa21b91ee2ed48b24bf684b762f01c684</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::wrap_node&lt; T &gt; *</type>
      <name>get_as</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a32bfcd190cb9a8e06f381097a23d0b66</anchor>
      <arglist>(std::wstring_view key)</arglist>
    </member>
    <member kind="function">
      <type>const impl::wrap_node&lt; T &gt; *</type>
      <name>get_as</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a0099ccf5df2f15ca17309c1897cb5e61</anchor>
      <arglist>(std::wstring_view key) const</arglist>
    </member>
    <member kind="function">
      <type>node &amp;</type>
      <name>at</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ae1e3925fca9b027958934a5c015c6c98</anchor>
      <arglist>(std::string_view key)</arglist>
    </member>
    <member kind="function">
      <type>const node &amp;</type>
      <name>at</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>acadf9153fcdc5019add35426044f369e</anchor>
      <arglist>(std::string_view key) const</arglist>
    </member>
    <member kind="function">
      <type>node &amp;</type>
      <name>at</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aef4d6369cf64a56322b96f1a15f761c6</anchor>
      <arglist>(std::wstring_view key)</arglist>
    </member>
    <member kind="function">
      <type>const node &amp;</type>
      <name>at</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ae8429bf4d0d3dd15b82344b575ec2a15</anchor>
      <arglist>(std::wstring_view key) const</arglist>
    </member>
    <member kind="typedef">
      <type>toml::table_iterator</type>
      <name>iterator</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a87e055bad435d5332dc496c518733a4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>toml::const_table_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a68fea8ca9b1018f9675fd346b9f4512e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a334f050427eb20c8530254f4cd6dddf3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a3352f9954e03087b6f596ae23283bd3c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a15a5f8bd6d194fcbe925a24e5b73b1fb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a96da67654c5ca131cfec2e3c07aa2730</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a40c72e81de1da66b7083cad11442cb05</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a311451209f990931ea25828c6091714f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>table &amp;</type>
      <name>for_each</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ac22ee86d5b83fd73a8013d39be1cc698</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;noexcept(for_each_is_nothrow&lt; Func &amp;&amp;, table &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>table &amp;&amp;</type>
      <name>for_each</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aca50cb292d1029b5df558847a0fec7c5</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;&amp;noexcept(for_each_is_nothrow&lt; Func &amp;&amp;, table &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>const table &amp;</type>
      <name>for_each</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a58267a6238a414e7b6db9f59218e790f</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;noexcept(for_each_is_nothrow&lt; Func &amp;&amp;, const table &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>const table &amp;&amp;</type>
      <name>for_each</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ab89cdd042f443f05a07e032494b650c2</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;&amp;noexcept(for_each_is_nothrow&lt; Func &amp;&amp;, const table &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a554f495f6f2ebc993be1bd0379447051</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ad7c4105854cc817bf6e781fa7fb1b6d6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>lower_bound</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>acc5180d0f3b1a78f45962f246a5d9605</anchor>
      <arglist>(std::string_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>lower_bound</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a3b678ac60d00790308b96f5e51da4274</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>lower_bound</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aaaffca1b5d53d7b72d2f29c14f06d75e</anchor>
      <arglist>(std::wstring_view key)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>lower_bound</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a2799383d484028ef5f466f8d1d34f315</anchor>
      <arglist>(std::wstring_view key) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a087ecb9d9fd4562d79f83341f0c643c0</anchor>
      <arglist>(std::string_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a65a894481bab5dd2bd00690931ed2692</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aacf6efa6e7865211f7a1283f79a88ee0</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ab1f12a827212d23ee0895fda92a5113c</anchor>
      <arglist>(std::wstring_view key)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a25f8f4a8c4672042d75b810856bd676f</anchor>
      <arglist>(std::wstring_view key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a7bec8d45353adeac918668a9fc5cb6a2</anchor>
      <arglist>(std::wstring_view key) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a1a90984876ccdd03aaa9e0f9801a839f</anchor>
      <arglist>(iterator pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a4dafb4ae116d92add973e5f27f880a9d</anchor>
      <arglist>(const_iterator pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a59f4dd9e42b73c9c1ec43134bef7e113</anchor>
      <arglist>(const_iterator begin, const_iterator end) noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ac6064df3f6f23b022884390a9963c1bc</anchor>
      <arglist>(std::string_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>add732807ee5e8fde81ceaa33acbaa7c6</anchor>
      <arglist>(std::wstring_view key)</arglist>
    </member>
    <member kind="function">
      <type>table &amp;</type>
      <name>prune</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a7f4d1d90dcea74d84f70db7e2d70c78a</anchor>
      <arglist>(bool recursive=true) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>table &amp;&amp;</type>
      <name>prune</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a14a59eed720b4d01840e290f82bb87b5</anchor>
      <arglist>(bool recursive=true) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aa710f85c588a1b00c3192d1553de4eef</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>emplace_hint</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a0d2378b5d13432bf8e325c388c650189</anchor>
      <arglist>(const_iterator hint, KeyType &amp;&amp;key, ValueArgs &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>insert</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aed4c994aec5209b69d54d19f306b31bc</anchor>
      <arglist>(KeyType &amp;&amp;key, ValueType &amp;&amp;val, value_flags flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a331eb6de04d95c3f76bf64e6f84d4ad6</anchor>
      <arglist>(Iter begin, Iter end, value_flags flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>insert_or_assign</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aa160b71ed6bc6fc638b19b5d9a8ef569</anchor>
      <arglist>(KeyType &amp;&amp;key, ValueType &amp;&amp;val, value_flags flags=preserve_source_value_flags)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>emplace</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a485d7763c578d716b4f22abb1db3c975</anchor>
      <arglist>(KeyType &amp;&amp;key, ValueArgs &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a6d8386049f630c8551597a2180479c7c</anchor>
      <arglist>(std::string_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a9b13a19ddfcd2f76685f57587d28701c</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a706215b69aefbcc303e2882341c766eb</anchor>
      <arglist>(std::wstring_view key)</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a5c4132e9936b1d6b0d9f2ccda7417fd7</anchor>
      <arglist>(std::wstring_view key) const</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>af8ebaed8105e5de2098992764f2d534a</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>abdeb5d9d9fc23c031c78e544c6196ea6</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>toml::time</name>
    <filename>structtoml_1_1time.html</filename>
    <member kind="function">
      <type>TOML_NODISCARD_CTOR</type>
      <name>time</name>
      <anchorfile>structtoml_1_1time.html</anchorfile>
      <anchor>a6d0fee402d14174142e5e51b3975b016</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TOML_CONSTRAINED_TEMPLATE</name>
      <anchorfile>structtoml_1_1time.html</anchorfile>
      <anchor>af16b84d0525e4281c72625a293c3757b</anchor>
      <arglist>((impl::all_integral&lt; H, M, S, NS &gt;), typename H, typename M, typename S=uint8_t, typename NS=uint32_t) TOML_NODISCARD_CTOR const expr time(H h</arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>hour</name>
      <anchorfile>structtoml_1_1time.html</anchorfile>
      <anchor>a18f32a58846d333f9e866b725b7b7ae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>minute</name>
      <anchorfile>structtoml_1_1time.html</anchorfile>
      <anchor>a02de4fe041dfa9535eb4df60d86f7fb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>second</name>
      <anchorfile>structtoml_1_1time.html</anchorfile>
      <anchor>a8ae0ab849a761543207ca86a2e1d0fdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>nanosecond</name>
      <anchorfile>structtoml_1_1time.html</anchorfile>
      <anchor>a3e9c60650ccd21f1e47132b777547185</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>toml::time_offset</name>
    <filename>structtoml_1_1time__offset.html</filename>
    <member kind="function">
      <type>TOML_NODISCARD_CTOR</type>
      <name>time_offset</name>
      <anchorfile>structtoml_1_1time__offset.html</anchorfile>
      <anchor>a6a97593a512af4875cca62b7645bef3e</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TOML_CONSTRAINED_TEMPLATE</name>
      <anchorfile>structtoml_1_1time__offset.html</anchorfile>
      <anchor>a49e1f06f9a40027c72e73bf0e96d5c52</anchor>
      <arglist>((impl::all_integral&lt; H, M &gt;), typename H, typename M) TOML_NODISCARD_CTOR const expr time_offset(H h</arglist>
    </member>
    <member kind="variable">
      <type>int16_t</type>
      <name>minutes</name>
      <anchorfile>structtoml_1_1time__offset.html</anchorfile>
      <anchor>a2f4cd0259300e318defc0c5efde592dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>structtoml_1_1time__offset.html</anchorfile>
      <anchor>a6e9d26d1a8664c16a9c737eab96ffe75</anchor>
      <arglist>(time_offset lhs, time_offset rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>structtoml_1_1time__offset.html</anchorfile>
      <anchor>af08ebc1f0c4c0b4a499f1112f9083566</anchor>
      <arglist>(time_offset lhs, time_offset rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>structtoml_1_1time__offset.html</anchorfile>
      <anchor>a9e7fda229147193b190dcbc74d1bfeb9</anchor>
      <arglist>(time_offset lhs, time_offset rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structtoml_1_1time__offset.html</anchorfile>
      <anchor>abaa5aeb9a5218f2cdbbf8522d5e0fda9</anchor>
      <arglist>(time_offset lhs, time_offset rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>structtoml_1_1time__offset.html</anchorfile>
      <anchor>ac23034ab2c168028807d7e29d06c4619</anchor>
      <arglist>(time_offset lhs, time_offset rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>TOML_PURE_INLINE_GETTER constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structtoml_1_1time__offset.html</anchorfile>
      <anchor>aa38a83fc906af4453d2e084d3f3a6342</anchor>
      <arglist>(time_offset lhs, time_offset rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structtoml_1_1time__offset.html</anchorfile>
      <anchor>ac87df01b4e60bd303d75712470517451</anchor>
      <arglist>(std::ostream &amp;lhs, const time_offset &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>toml::toml_formatter</name>
    <filename>classtoml_1_1toml__formatter.html</filename>
    <member kind="function">
      <type></type>
      <name>toml_formatter</name>
      <anchorfile>classtoml_1_1toml__formatter.html</anchorfile>
      <anchor>a8110aaa1057d7633428f6795ac14983a</anchor>
      <arglist>(const toml::node &amp;source, format_flags flags=default_flags) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>toml_formatter</name>
      <anchorfile>classtoml_1_1toml__formatter.html</anchorfile>
      <anchor>a3af0ca99139edbd30845a5cd7d2c0137</anchor>
      <arglist>(const toml::parse_result &amp;result, format_flags flags=default_flags) noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr format_flags</type>
      <name>default_flags</name>
      <anchorfile>classtoml_1_1toml__formatter.html</anchorfile>
      <anchor>a0aa00006896f1b23e8bb2ec1a6842845</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classtoml_1_1toml__formatter.html</anchorfile>
      <anchor>a50815f484095776407f34b1694bbf73e</anchor>
      <arglist>(std::ostream &amp;lhs, toml_formatter &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classtoml_1_1toml__formatter.html</anchorfile>
      <anchor>af02b5eabe1e84be843255c7cf02e8dda</anchor>
      <arglist>(std::ostream &amp;lhs, toml_formatter &amp;&amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>toml::value</name>
    <filename>classtoml_1_1value.html</filename>
    <templarg></templarg>
    <base>toml::node</base>
    <member kind="typedef">
      <type>ValueType</type>
      <name>value_type</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ad87b8c7ec465c424b861aba2d4cd5526</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; std::is_same_v&lt; value_type std::string &gt;, std::string_view, std::conditional_t&lt; impl::is_one_of&lt; value_type, double, int64_t, bool &gt;, value_type, const value_type &amp; &gt; &gt;)</type>
      <name>value_arg</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a726fe94470f7caac0b0b553f5c9eeb05</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>value</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>addb06e973867c52b1ea77efae1c6ad10</anchor>
      <arglist>(Args &amp;&amp;... args) noexcept(noexcept(value_type(impl::native_value_maker&lt; value_type, std::decay_t&lt; Args &gt;... &gt;::make(static_cast&lt; Args &amp;&amp; &gt;(args)...))))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>value</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a62ace5d37c6cf09fdc589efa5e0a0905</anchor>
      <arglist>(const value &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>value</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a65e6e8fa27455d83ad3ada020e11cf91</anchor>
      <arglist>(const value &amp;other, value_flags flags) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>value</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>adfb0250a9769fea9d585609db77bc64a</anchor>
      <arglist>(value &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>value</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a5f6f5a83b2dc3f5842f7fd5fbc0e4f59</anchor>
      <arglist>(value &amp;&amp;other, value_flags flags) noexcept</arglist>
    </member>
    <member kind="function">
      <type>value &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a339731a8213b5e0993b5547067fde1f7</anchor>
      <arglist>(const value &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>value &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a958da7aae3ff90094e348ebceaa4aa5d</anchor>
      <arglist>(value &amp;&amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>value &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a08950deffd1a5568154d58d27517c973</anchor>
      <arglist>(value_arg rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa94b031f02a932c90beb70896467f3e0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER bool</type>
      <name>is</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a9ecbbcf44989af503bf272214c3b943a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a42c16f19aa5bdeba64c62d500e6a07dd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TOML_PURE_INLINE_GETTER impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a98d0bc7e2b3d5bf76356bb75ef7eaded</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD optional&lt; T &gt;</type>
      <name>value_exact</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a41028c589c26e362a2eadfc34319f88f</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD optional&lt; T &gt;</type>
      <name>value</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a0537ef983c04ac04458d69817673eb64</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD auto</type>
      <name>value_or</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>af627a857a57927e3168bf2615a09e55e</anchor>
      <arglist>(T &amp;&amp;default_value) const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto) TOML_PURE_GETTER</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>af74590ffce9dbece0bfe513748946bf8</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto) TOML_PURE_GETTER</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad84b9061d3d79e98b3fd821d0b2f848f</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto) TOML_PURE_GETTER</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a93a67fe01c09c44c6efadad76b79ee0d</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto) TOML_PURE_GETTER</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a8f4542448fdb626f79c83675b90b4878</anchor>
      <arglist>() const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TOML_PURE_INLINE_GETTER source_region &amp;</type>
      <name>source</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a00fcd61d1fe6e5eff55fcc73125b203d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad47390f3832260db7bf06cd282598240</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a371a03c4b91cfbb8d9ee785c1eacf836</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad4a42e50f923b0fe1efff0a6719dab90</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac387cb04111addc0c291ecdd6f299666</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD</type>
      <name>operator node_view&lt; node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac93b48af1a887df8a7ed920feb466025</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD</type>
      <name>operator node_view&lt; const node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a5bcdd9384e6bc00070f9dbb1a10a92d5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a6fbac216f402b92a357e08bc259f70e9</anchor>
      <arglist>(std::string_view path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a670a31c35e3f2e8ffe0d622df3afcbf9</anchor>
      <arglist>(std::string_view path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a7c588b117fa0a1cecc1a74ca6b60b481</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a58a3340e6f377095c72fb85b391985ba</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a5c437295e93e6d680e984ad9c456e792</anchor>
      <arglist>(std::wstring_view path)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a4a1e58e889df8f0dcba278f532957607</anchor>
      <arglist>(std::wstring_view path) const</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a49bbc83d8ea5ee5167fb32531fd86547</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a04d5383250b06484da6fd8710e6b0c68</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD optional&lt; T &gt;</type>
      <name>value_exact</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a41028c589c26e362a2eadfc34319f88f</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD optional&lt; T &gt;</type>
      <name>value</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a0537ef983c04ac04458d69817673eb64</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD auto</type>
      <name>value_or</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>af627a857a57927e3168bf2615a09e55e</anchor>
      <arglist>(T &amp;&amp;default_value) const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto) TOML_PURE_GETTER</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>af74590ffce9dbece0bfe513748946bf8</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto) TOML_PURE_GETTER</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad84b9061d3d79e98b3fd821d0b2f848f</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto) TOML_PURE_GETTER</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a93a67fe01c09c44c6efadad76b79ee0d</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto) TOML_PURE_GETTER</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a8f4542448fdb626f79c83675b90b4878</anchor>
      <arglist>() const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TOML_PURE_INLINE_GETTER source_region &amp;</type>
      <name>source</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a00fcd61d1fe6e5eff55fcc73125b203d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad47390f3832260db7bf06cd282598240</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a371a03c4b91cfbb8d9ee785c1eacf836</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad4a42e50f923b0fe1efff0a6719dab90</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac387cb04111addc0c291ecdd6f299666</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD</type>
      <name>operator node_view&lt; node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac93b48af1a887df8a7ed920feb466025</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD</type>
      <name>operator node_view&lt; const node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a5bcdd9384e6bc00070f9dbb1a10a92d5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a6fbac216f402b92a357e08bc259f70e9</anchor>
      <arglist>(std::string_view path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a670a31c35e3f2e8ffe0d622df3afcbf9</anchor>
      <arglist>(std::string_view path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a7c588b117fa0a1cecc1a74ca6b60b481</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a58a3340e6f377095c72fb85b391985ba</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a5c437295e93e6d680e984ad9c456e792</anchor>
      <arglist>(std::wstring_view path)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a4a1e58e889df8f0dcba278f532957607</anchor>
      <arglist>(std::wstring_view path) const</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a49bbc83d8ea5ee5167fb32531fd86547</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a04d5383250b06484da6fd8710e6b0c68</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa94b031f02a932c90beb70896467f3e0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER bool</type>
      <name>is</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a9ecbbcf44989af503bf272214c3b943a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a42c16f19aa5bdeba64c62d500e6a07dd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TOML_PURE_INLINE_GETTER impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a98d0bc7e2b3d5bf76356bb75ef7eaded</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD optional&lt; T &gt;</type>
      <name>value_exact</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a41028c589c26e362a2eadfc34319f88f</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD optional&lt; T &gt;</type>
      <name>value</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a0537ef983c04ac04458d69817673eb64</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD auto</type>
      <name>value_or</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>af627a857a57927e3168bf2615a09e55e</anchor>
      <arglist>(T &amp;&amp;default_value) const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto) TOML_PURE_GETTER</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>af74590ffce9dbece0bfe513748946bf8</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto) TOML_PURE_GETTER</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad84b9061d3d79e98b3fd821d0b2f848f</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto) TOML_PURE_GETTER</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a93a67fe01c09c44c6efadad76b79ee0d</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto) TOML_PURE_GETTER</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a8f4542448fdb626f79c83675b90b4878</anchor>
      <arglist>() const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TOML_PURE_INLINE_GETTER source_region &amp;</type>
      <name>source</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a00fcd61d1fe6e5eff55fcc73125b203d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad47390f3832260db7bf06cd282598240</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a371a03c4b91cfbb8d9ee785c1eacf836</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad4a42e50f923b0fe1efff0a6719dab90</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac387cb04111addc0c291ecdd6f299666</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD</type>
      <name>operator node_view&lt; node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac93b48af1a887df8a7ed920feb466025</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD</type>
      <name>operator node_view&lt; const node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a5bcdd9384e6bc00070f9dbb1a10a92d5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a6fbac216f402b92a357e08bc259f70e9</anchor>
      <arglist>(std::string_view path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a670a31c35e3f2e8ffe0d622df3afcbf9</anchor>
      <arglist>(std::string_view path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a7c588b117fa0a1cecc1a74ca6b60b481</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a58a3340e6f377095c72fb85b391985ba</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a5c437295e93e6d680e984ad9c456e792</anchor>
      <arglist>(std::wstring_view path)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a4a1e58e889df8f0dcba278f532957607</anchor>
      <arglist>(std::wstring_view path) const</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a49bbc83d8ea5ee5167fb32531fd86547</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a04d5383250b06484da6fd8710e6b0c68</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_type</type>
      <name>type</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a69ed0d45e2de5929fea3375cd68960eb</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a66f31db0fe4aa1a65fff1ce3bb8be1eb</anchor>
      <arglist>(node_type ntype) const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a5097925569d4e2f581907dc692aefe02</anchor>
      <arglist>(node_type ntype, node *&amp;first_nonmatch) noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a40d4ea2ff0d393245fc31dfc6a0f27fb</anchor>
      <arglist>(node_type ntype, const node *&amp;first_nonmatch) const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_table</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a4169ed284f3a6d31e838f117dc2f3df0</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a160b4dd33afd4d8c02b1a4c7bc48f17f</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array_of_tables</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a6676776ebf94891825c658432252cab0</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_value</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a5d1d988a74ab5c6e6cae9706891083f3</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_string</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a98d477b7ee151d7fc68c49ea7c52a314</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_integer</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ad5b1844c180a0fb2de06ed4cdbb259a4</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_floating_point</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>aa5b3aac577c60b24f31550f8b7add69f</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_number</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ad40ad64d9a8f0256e550a9226dbed121</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_boolean</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a6816cd2fbae35e21990d3d5616da595a</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_date</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a47ebc97c4b51999c81eb053d453ac916</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_time</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a9a1a2e0a15181c6677d14a2812e34878</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_date_time</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a1e8fb6a37f65fff99a631ade34ab6db4</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>table *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a684976e4e2ea671e7bd21c39a4f73575</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>array *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a5e2f5338ace567ec7bc755885b793c01</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>value&lt; std::string &gt; *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a9a7177395eb559e2ed2c117832dace2a</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>value&lt; int64_t &gt; *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a170f66cced91fc2886c22df7d45f8f73</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>value&lt; double &gt; *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ab95947fa235b163c138d925425035059</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>value&lt; bool &gt; *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ab06706bf668f496a6d24d6891b34b464</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>value&lt; date &gt; *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>afd03f397e42e97c8c3e045c4b19b609e</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>value&lt; time &gt; *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a4314057128266b74095454cca743a27d</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>value&lt; date_time &gt; *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a49cf272fa0f71b73938df7ddffcc8b1c</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const table *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a8b5c3b02c365287e9b563dbe11c7172c</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const array *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a5d7017fd9eec74756496960956a92d6a</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const value&lt; std::string &gt; *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a316fa5b1b2764447c8d51c38071f79c1</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const value&lt; int64_t &gt; *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>aac0acf026dfb903349ce49321153f55d</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const value&lt; double &gt; *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>af2a3d05b2ef1ff57291d3d4c660b86d6</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const value&lt; bool &gt; *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a3a81671d39b75363ba7c2b3fd6b7644a</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const value&lt; date &gt; *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a40247e128f2ffdb5386ee41b2a84b52d</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const value&lt; time &gt; *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a725874485bb19ade041deb8869bff6d5</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const value&lt; date_time &gt; *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ad297cd1ba10960e125e5a0c75ea51ff4</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>get</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>af607a8347e5918b35fcfb11e8f7d4398</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;&amp;</type>
      <name>get</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a0b4ea781b83a3c164df24129d0e73341</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>get</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a3a0ec9ea9604d68ba9a9a4692868f8d8</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;&amp;</type>
      <name>get</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ae3bb95e7af4622ded16328b827a6089d</anchor>
      <arglist>() const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>operator*</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a054c1fb796a4e560d4afb27019bb1aef</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;&amp;</type>
      <name>operator*</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a64ad94a1086eedde1a94f12f020498d2</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>operator*</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a15e56286d17f11a4d567eaddb36368f8</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;&amp;</type>
      <name>operator*</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a752f50ec7dac91b579e48db6a15f388e</anchor>
      <arglist>() const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator value_type &amp;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>adaf04b51fea2bdc3da39fbf63c240b3b</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator value_type &amp;&amp;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ad5d4a1c818d7004bc4c42219edf84dd9</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const value_type &amp;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>aeaa7f385c753bc7f11f0758d8ae325b6</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const value_type &amp;&amp;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>aef9bb783e7c8ba475838742b7cfc3178</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>value_type *</type>
      <name>operator-&gt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a79983137e697848cb82a95b265b03d4d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const value_type *</type>
      <name>operator-&gt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a23ab1c59bf4ec4bc19b6fa3fcf399171</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>value_flags</type>
      <name>flags</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a1a213908a7297491a07e647967897fcb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>value &amp;</type>
      <name>flags</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a4311828058d75bfaa2c01c3395d09385</anchor>
      <arglist>(value_flags new_flags) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa94b031f02a932c90beb70896467f3e0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER bool</type>
      <name>is</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a9ecbbcf44989af503bf272214c3b943a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a42c16f19aa5bdeba64c62d500e6a07dd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TOML_PURE_INLINE_GETTER impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a98d0bc7e2b3d5bf76356bb75ef7eaded</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD optional&lt; T &gt;</type>
      <name>value_exact</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a41028c589c26e362a2eadfc34319f88f</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD optional&lt; T &gt;</type>
      <name>value</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a0537ef983c04ac04458d69817673eb64</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD auto</type>
      <name>value_or</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>af627a857a57927e3168bf2615a09e55e</anchor>
      <arglist>(T &amp;&amp;default_value) const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto) TOML_PURE_GETTER</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>af74590ffce9dbece0bfe513748946bf8</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto) TOML_PURE_GETTER</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad84b9061d3d79e98b3fd821d0b2f848f</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto) TOML_PURE_GETTER</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a93a67fe01c09c44c6efadad76b79ee0d</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto) TOML_PURE_GETTER</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a8f4542448fdb626f79c83675b90b4878</anchor>
      <arglist>() const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TOML_PURE_INLINE_GETTER source_region &amp;</type>
      <name>source</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a00fcd61d1fe6e5eff55fcc73125b203d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad47390f3832260db7bf06cd282598240</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a371a03c4b91cfbb8d9ee785c1eacf836</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad4a42e50f923b0fe1efff0a6719dab90</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac387cb04111addc0c291ecdd6f299666</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD</type>
      <name>operator node_view&lt; node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac93b48af1a887df8a7ed920feb466025</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD</type>
      <name>operator node_view&lt; const node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a5bcdd9384e6bc00070f9dbb1a10a92d5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a6fbac216f402b92a357e08bc259f70e9</anchor>
      <arglist>(std::string_view path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a670a31c35e3f2e8ffe0d622df3afcbf9</anchor>
      <arglist>(std::string_view path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a7c588b117fa0a1cecc1a74ca6b60b481</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a58a3340e6f377095c72fb85b391985ba</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a5c437295e93e6d680e984ad9c456e792</anchor>
      <arglist>(std::wstring_view path)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a4a1e58e889df8f0dcba278f532957607</anchor>
      <arglist>(std::wstring_view path) const</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a49bbc83d8ea5ee5167fb32531fd86547</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a04d5383250b06484da6fd8710e6b0c68</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ae160ab8204a4ed57dac2ad6c5aebb683</anchor>
      <arglist>(std::ostream &amp;lhs, const value &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_GETTER bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa94b031f02a932c90beb70896467f3e0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER bool</type>
      <name>is</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a9ecbbcf44989af503bf272214c3b943a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_PURE_INLINE_GETTER impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a42c16f19aa5bdeba64c62d500e6a07dd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TOML_PURE_INLINE_GETTER impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a98d0bc7e2b3d5bf76356bb75ef7eaded</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD optional&lt; T &gt;</type>
      <name>value_exact</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a41028c589c26e362a2eadfc34319f88f</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD optional&lt; T &gt;</type>
      <name>value</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a0537ef983c04ac04458d69817673eb64</anchor>
      <arglist>() const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD auto</type>
      <name>value_or</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>af627a857a57927e3168bf2615a09e55e</anchor>
      <arglist>(T &amp;&amp;default_value) const noexcept(impl::value_retrieval_is_nothrow&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto) TOML_PURE_GETTER</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>af74590ffce9dbece0bfe513748946bf8</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto) TOML_PURE_GETTER</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad84b9061d3d79e98b3fd821d0b2f848f</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto) TOML_PURE_GETTER</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a93a67fe01c09c44c6efadad76b79ee0d</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto) TOML_PURE_GETTER</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a8f4542448fdb626f79c83675b90b4878</anchor>
      <arglist>() const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TOML_PURE_INLINE_GETTER source_region &amp;</type>
      <name>source</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a00fcd61d1fe6e5eff55fcc73125b203d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad47390f3832260db7bf06cd282598240</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a371a03c4b91cfbb8d9ee785c1eacf836</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad4a42e50f923b0fe1efff0a6719dab90</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac387cb04111addc0c291ecdd6f299666</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD</type>
      <name>operator node_view&lt; node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac93b48af1a887df8a7ed920feb466025</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD</type>
      <name>operator node_view&lt; const node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a5bcdd9384e6bc00070f9dbb1a10a92d5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a6fbac216f402b92a357e08bc259f70e9</anchor>
      <arglist>(std::string_view path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a670a31c35e3f2e8ffe0d622df3afcbf9</anchor>
      <arglist>(std::string_view path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a7c588b117fa0a1cecc1a74ca6b60b481</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a58a3340e6f377095c72fb85b391985ba</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a5c437295e93e6d680e984ad9c456e792</anchor>
      <arglist>(std::wstring_view path)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a4a1e58e889df8f0dcba278f532957607</anchor>
      <arglist>(std::wstring_view path) const</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a49bbc83d8ea5ee5167fb32531fd86547</anchor>
      <arglist>(const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a04d5383250b06484da6fd8710e6b0c68</anchor>
      <arglist>(const toml::path &amp;path) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_type</type>
      <name>type</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a69ed0d45e2de5929fea3375cd68960eb</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a66f31db0fe4aa1a65fff1ce3bb8be1eb</anchor>
      <arglist>(node_type ntype) const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a5097925569d4e2f581907dc692aefe02</anchor>
      <arglist>(node_type ntype, node *&amp;first_nonmatch) noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a40d4ea2ff0d393245fc31dfc6a0f27fb</anchor>
      <arglist>(node_type ntype, const node *&amp;first_nonmatch) const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_table</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a4169ed284f3a6d31e838f117dc2f3df0</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a160b4dd33afd4d8c02b1a4c7bc48f17f</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array_of_tables</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a6676776ebf94891825c658432252cab0</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_value</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a5d1d988a74ab5c6e6cae9706891083f3</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_string</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a98d477b7ee151d7fc68c49ea7c52a314</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_integer</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ad5b1844c180a0fb2de06ed4cdbb259a4</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_floating_point</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>aa5b3aac577c60b24f31550f8b7add69f</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_number</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ad40ad64d9a8f0256e550a9226dbed121</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_boolean</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a6816cd2fbae35e21990d3d5616da595a</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_date</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a47ebc97c4b51999c81eb053d453ac916</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_time</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a9a1a2e0a15181c6677d14a2812e34878</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_date_time</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a1e8fb6a37f65fff99a631ade34ab6db4</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>table *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a684976e4e2ea671e7bd21c39a4f73575</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>array *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a5e2f5338ace567ec7bc755885b793c01</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>value&lt; std::string &gt; *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a9a7177395eb559e2ed2c117832dace2a</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>value&lt; int64_t &gt; *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a170f66cced91fc2886c22df7d45f8f73</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>value&lt; double &gt; *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ab95947fa235b163c138d925425035059</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>value&lt; bool &gt; *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ab06706bf668f496a6d24d6891b34b464</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>value&lt; date &gt; *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>afd03f397e42e97c8c3e045c4b19b609e</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>value&lt; time &gt; *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a4314057128266b74095454cca743a27d</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>value&lt; date_time &gt; *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a49cf272fa0f71b73938df7ddffcc8b1c</anchor>
      <arglist>() noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const table *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a8b5c3b02c365287e9b563dbe11c7172c</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const array *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a5d7017fd9eec74756496960956a92d6a</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const value&lt; std::string &gt; *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a316fa5b1b2764447c8d51c38071f79c1</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const value&lt; int64_t &gt; *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>aac0acf026dfb903349ce49321153f55d</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const value&lt; double &gt; *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>af2a3d05b2ef1ff57291d3d4c660b86d6</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const value&lt; bool &gt; *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a3a81671d39b75363ba7c2b3fd6b7644a</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const value&lt; date &gt; *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a40247e128f2ffdb5386ee41b2a84b52d</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const value&lt; time &gt; *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a725874485bb19ade041deb8869bff6d5</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const value&lt; date_time &gt; *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ad297cd1ba10960e125e5a0c75ea51ff4</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>get</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>af607a8347e5918b35fcfb11e8f7d4398</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;&amp;</type>
      <name>get</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a0b4ea781b83a3c164df24129d0e73341</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>get</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a3a0ec9ea9604d68ba9a9a4692868f8d8</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;&amp;</type>
      <name>get</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ae3bb95e7af4622ded16328b827a6089d</anchor>
      <arglist>() const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>operator*</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a054c1fb796a4e560d4afb27019bb1aef</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;&amp;</type>
      <name>operator*</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a64ad94a1086eedde1a94f12f020498d2</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>operator*</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a15e56286d17f11a4d567eaddb36368f8</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;&amp;</type>
      <name>operator*</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a752f50ec7dac91b579e48db6a15f388e</anchor>
      <arglist>() const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator value_type &amp;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>adaf04b51fea2bdc3da39fbf63c240b3b</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator value_type &amp;&amp;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ad5d4a1c818d7004bc4c42219edf84dd9</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const value_type &amp;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>aeaa7f385c753bc7f11f0758d8ae325b6</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const value_type &amp;&amp;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>aef9bb783e7c8ba475838742b7cfc3178</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>value_type *</type>
      <name>operator-&gt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a79983137e697848cb82a95b265b03d4d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const value_type *</type>
      <name>operator-&gt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a23ab1c59bf4ec4bc19b6fa3fcf399171</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>value_flags</type>
      <name>flags</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a1a213908a7297491a07e647967897fcb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>value &amp;</type>
      <name>flags</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a4311828058d75bfaa2c01c3395d09385</anchor>
      <arglist>(value_flags new_flags) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a0b90e4f85ecaf2c81e4ba8b42aa5ce34</anchor>
      <arglist>(const value &amp;lhs, value_arg rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>const value &amp;true friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a6ad2c610b766501c978d2ff80f5ea5c1</anchor>
      <arglist>(const value &amp;lhs, value_arg rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a6bbe09942bd6046fa94addb911940491</anchor>
      <arglist>(value_arg lhs, const value &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a7d02565c608c663afc8f3d2102639740</anchor>
      <arglist>(const value &amp;lhs, value_arg rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a2f37f69d3e477c0c2e2ba16f6919815e</anchor>
      <arglist>(value_arg lhs, const value &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ace8c00e345c69ee93e5d2bd2df694340</anchor>
      <arglist>(const value &amp;lhs, value_arg rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>af200f2be4273ed0923743f4b918f86e6</anchor>
      <arglist>(value_arg lhs, const value &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a80417b5055072f20d3a6985d1b78af21</anchor>
      <arglist>(const value &amp;lhs, value_arg rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a727e2acd21edf04a144918d174706ba6</anchor>
      <arglist>(value_arg lhs, const value &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a2fa446100047d052d0cca2c1f3f60085</anchor>
      <arglist>(const value &amp;lhs, const value&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a872e565adfbcd201f2ab1e3103699758</anchor>
      <arglist>(const value &amp;lhs, const value&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a7fdc4f87f9ec3efb896cc3e09694328b</anchor>
      <arglist>(const value &amp;lhs, const value&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ac6af15f59d537d95d1afe887b12b697e</anchor>
      <arglist>(const value &amp;lhs, const value&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ab95d07a7f48e44baefbacbf5f6072837</anchor>
      <arglist>(const value &amp;lhs, const value&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a0ebdea821d98546de4b686f450506637</anchor>
      <arglist>(const value &amp;lhs, const value&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>toml::yaml_formatter</name>
    <filename>classtoml_1_1yaml__formatter.html</filename>
    <member kind="function">
      <type></type>
      <name>yaml_formatter</name>
      <anchorfile>classtoml_1_1yaml__formatter.html</anchorfile>
      <anchor>a0089cdd517d9f6641ed10c8ddb5b1c11</anchor>
      <arglist>(const toml::node &amp;source, format_flags flags=default_flags) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>yaml_formatter</name>
      <anchorfile>classtoml_1_1yaml__formatter.html</anchorfile>
      <anchor>a2eb50c4983f7ec26a417befeface23bf</anchor>
      <arglist>(const toml::parse_result &amp;result, format_flags flags=default_flags) noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr format_flags</type>
      <name>default_flags</name>
      <anchorfile>classtoml_1_1yaml__formatter.html</anchorfile>
      <anchor>af161f0a6c794945e85b210ee85cb78e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classtoml_1_1yaml__formatter.html</anchorfile>
      <anchor>a10b0c89256eb2ab4ea2b4e23f8ad8eff</anchor>
      <arglist>(std::ostream &amp;lhs, yaml_formatter &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classtoml_1_1yaml__formatter.html</anchorfile>
      <anchor>a50d463617bccb66a9cdf01390321bd47</anchor>
      <arglist>(std::ostream &amp;lhs, yaml_formatter &amp;&amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>toml</name>
    <filename>namespacetoml.html</filename>
    <namespace>toml::literals</namespace>
    <class kind="class">toml::array</class>
    <class kind="struct">toml::date</class>
    <class kind="struct">toml::date_time</class>
    <class kind="struct">toml::inserter</class>
    <class kind="class">toml::json_formatter</class>
    <class kind="class">toml::key</class>
    <class kind="class">toml::node</class>
    <class kind="class">toml::node_view</class>
    <class kind="class">toml::parse_error</class>
    <class kind="class">toml::parse_result</class>
    <class kind="class">toml::path</class>
    <class kind="class">toml::path_component</class>
    <class kind="struct">toml::source_position</class>
    <class kind="struct">toml::source_region</class>
    <class kind="class">toml::table</class>
    <class kind="struct">toml::time</class>
    <class kind="struct">toml::time_offset</class>
    <class kind="class">toml::toml_formatter</class>
    <class kind="class">toml::value</class>
    <class kind="class">toml::yaml_formatter</class>
    <member kind="typedef">
      <type>impl::array_iterator&lt; false &gt;</type>
      <name>array_iterator</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a2b0930b7b75df6f189d9815c000bef8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>impl::array_iterator&lt; true &gt;</type>
      <name>const_array_iterator</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>acc99ae392186dc605aeb233d26f07013</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>toml_formatter</type>
      <name>default_formatter</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a2b87b5d257f54773683328031f453e76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::inserted_type_of_&lt; impl::remove_cvref&lt; T &gt; &gt;::type</type>
      <name>inserted_type_of</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>ad32f00d2029822e3ddec824b22249075</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint32_t</type>
      <name>source_index</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>afb852fa22a8b3ea9d200d645b9d5c308</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const std::string &gt;</type>
      <name>source_path_ptr</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>ac6cf446b480546ae1f71f5b86442368d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::optional&lt; T &gt;</type>
      <name>optional</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>af34a9fb3305e419784104609e6bbb7ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>impl::table_iterator&lt; false &gt;</type>
      <name>table_iterator</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a57894617837065610e5746a3204fa8e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>impl::table_iterator&lt; true &gt;</type>
      <name>const_table_iterator</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>adeb2aa84bcd2bcb46e2cdfaa5dd6572f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>ad5ed4772ef7f3b0d09804e43983a5e82</anchor>
      <arglist>(node &amp;root, std::string_view path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a45b053e3d3eb1533f68fab53e0b14fa4</anchor>
      <arglist>(const node &amp;root, std::string_view path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>aa372b5b59b6a38b126856833d0794375</anchor>
      <arglist>(node &amp;root, std::wstring_view path)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a5f156da8d343dd863b2b4c523a6686ca</anchor>
      <arglist>(const node &amp;root, std::wstring_view path)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; Char &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>aba6195d5e83ab18f30c9a211384e2c1a</anchor>
      <arglist>(std::basic_ostream&lt; Char &gt; &amp;lhs, node_type rhs)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD parse_result</type>
      <name>parse</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a8a3b39e77f5b3acb74357f4ed9316045</anchor>
      <arglist>(std::string_view doc, std::string_view source_path={})</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD parse_result</type>
      <name>parse</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>ab6487d1e93530f2716854b1a140125b5</anchor>
      <arglist>(std::string_view doc, std::string &amp;&amp;source_path)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD parse_result</type>
      <name>parse_file</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a5820964de3582b3a3351b475ae112296</anchor>
      <arglist>(std::string_view file_path)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD parse_result</type>
      <name>parse</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>af0a88c60b2365267210c8e3eb7568518</anchor>
      <arglist>(std::string_view doc, std::wstring_view source_path)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD parse_result</type>
      <name>parse</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a793ffbf491c0b86364a75b859782feaa</anchor>
      <arglist>(std::istream &amp;doc, std::wstring_view source_path)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD parse_result</type>
      <name>parse_file</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>aac0965ad7b76771aac7d3e73af897154</anchor>
      <arglist>(std::wstring_view file_path)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD parse_result</type>
      <name>parse</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a7415a7c765413158349b59af398e763d</anchor>
      <arglist>(std::istream &amp;doc, std::string_view source_path={})</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD parse_result</type>
      <name>parse</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>aa095d79ff53e4c9a8dc8bad9fda95b45</anchor>
      <arglist>(std::istream &amp;doc, std::string &amp;&amp;source_path)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; node &gt;</type>
      <name>at_path</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a895315bb1d8e5e2b3fb587831c236fe4</anchor>
      <arglist>(node &amp;root, const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD node_view&lt; const node &gt;</type>
      <name>at_path</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a128ec6cd2d75ba8036432a1fea21a591</anchor>
      <arglist>(const node &amp;root, const toml::path &amp;path) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>enum TOML_CLOSED_ENUM</type>
      <name>node_type</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>af7357253759591d5f65f01e2d81882ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum TOML_CLOSED_ENUM</type>
      <name>table</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a199742c7457c050829cdde4fa01e89a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum TOML_CLOSED_ENUM</type>
      <name>array</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a4d74763b65b84683e3a4e399fe20c5f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum TOML_CLOSED_ENUM</type>
      <name>string</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a9e934e4fca737361d394ea606359db39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum TOML_CLOSED_ENUM</type>
      <name>integer</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a86c2f2356bbbf7fa1577725de6dc5384</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum TOML_CLOSED_ENUM</type>
      <name>floating_point</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>ab87451f33cf9830e9b67eee656e5f311</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum TOML_CLOSED_ENUM</type>
      <name>boolean</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a8ba6913dfca310755b73e4fdd270d3d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum TOML_CLOSED_ENUM</type>
      <name>date</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>ad0a4bca35435ad34f632364b84261bf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum TOML_CLOSED_ENUM</type>
      <name>time</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>ad15409e3f425b99e0c8ecb3c340c736c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum TOML_CLOSED_ENUM</type>
      <name>date_time</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>af708cd16b375749264d4b7971fe46947</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum TOML_OPEN_FLAGS_ENUM</type>
      <name>value_flags</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a2cba5502633cacb7b290b7f822129f92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum TOML_OPEN_FLAGS_ENUM</type>
      <name>format_as_binary</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a889b89cd1ac37c9e8569bae7f481e757</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum TOML_OPEN_FLAGS_ENUM</type>
      <name>format_as_octal</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>ad1c9516b6f03904c65cb5f66a98684a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum TOML_OPEN_FLAGS_ENUM</type>
      <name>format_as_hexadecimal</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a1911a72302059c5e1ff15ca529976b88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr value_flags</type>
      <name>preserve_source_value_flags</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a32f700b152e15c357801e905d626a4fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum TOML_CLOSED_FLAGS_ENUM</type>
      <name>format_flags</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a3d80054cd13c6b6dcf31a4cae5166add</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum TOML_CLOSED_FLAGS_ENUM</type>
      <name>quote_dates_and_times</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>ae86af2a6e30e74e915e578e1bef69508</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum TOML_CLOSED_FLAGS_ENUM</type>
      <name>quote_infinities_and_nans</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a7641972152fb46e31d5b8b9a1d3ea01b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum TOML_CLOSED_FLAGS_ENUM</type>
      <name>allow_literal_strings</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a9ca9a8454ab2389bcb948115886baff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum TOML_CLOSED_FLAGS_ENUM</type>
      <name>allow_multi_line_strings</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a0e126569fab4191ffa268a56750206ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum TOML_CLOSED_FLAGS_ENUM</type>
      <name>allow_real_tabs_in_strings</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>ab0e60a8ecb2028d424d668fbb8ce56ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum TOML_CLOSED_FLAGS_ENUM</type>
      <name>allow_unicode_strings</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a38295fa56ed0ad6a650152b66c26ce9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum TOML_CLOSED_FLAGS_ENUM</type>
      <name>allow_binary_integers</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>aa9752525711411b426ac99848526c022</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum TOML_CLOSED_FLAGS_ENUM</type>
      <name>allow_octal_integers</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a48b04fc7934a98fd2babf59f69ba2f72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum TOML_CLOSED_FLAGS_ENUM</type>
      <name>allow_hexadecimal_integers</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a61662e099e6d5b181259c6243d486a07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum TOML_CLOSED_FLAGS_ENUM</type>
      <name>indent_sub_tables</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>aa84e8d53d938bc3f026e8624931b8537</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum TOML_CLOSED_FLAGS_ENUM</type>
      <name>indent_array_elements</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>ae1967cc15fb4478c1ed2a99a5dbd0312</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum TOML_CLOSED_FLAGS_ENUM</type>
      <name>indentation</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a06da9a129d7bec958e92b7934473a341</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum TOML_CLOSED_FLAGS_ENUM</type>
      <name>relaxed_float_precision</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a3b3922341cb9a3ecab7e635fa4ce2686</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_table</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>ad11c8c8a8286d6931e40658679aa7ddb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_array</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a2251b703f3ec4d1a3036c82ead3d69cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_container</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>ad6c6e1677e1cc564d40efa89af2514a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_string</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>aea14621807afe92a840d82c7139cde07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_integer</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a513bdc4a19071f0be70e92bb6cb1a1a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_floating_point</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a1aaaa0e264cdd4f43518571f2f61ac36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_number</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a64ce7ed6974d2b17823565bc67c40873</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_boolean</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a8e79820651cc9a835082cf9abd47d885</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_date</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a3c5daa4563e3aff2b5e6460aa97d28df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_time</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a87aee32768a32bb838150421e4e3cf97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_date_time</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a3285caf012789a607851026f9827a33d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_chronological</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a7f8764060ca7dccb7e829f67d82c0485</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_value</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a0d9cd265e448130b95305ccd68d2f508</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_node</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a4e4126f63ba560963de095cd9bee0704</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_node_view</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>ab5b06dac8c1e0de9e06411917e10b618</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_key</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a7b8ef907d9629d139a30d874b345b195</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_key_or_convertible</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a052fafde71907ef3a8590ef7ec2455d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum TOML_CLOSED_ENUM</type>
      <name>path_component_type</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a6bd482033d5a07c6925c36161551e6c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>toml::literals</name>
    <filename>namespacetoml_1_1literals.html</filename>
    <member kind="function">
      <type>TOML_NODISCARD TOML_ALWAYS_INLINE parse_result</type>
      <name>operator&quot;&quot;_toml</name>
      <anchorfile>namespacetoml_1_1literals.html</anchorfile>
      <anchor>a2af33736a9fdbd731949c87d088ee3ad</anchor>
      <arglist>(const char *str, size_t len)</arglist>
    </member>
    <member kind="function">
      <type>TOML_NODISCARD TOML_ALWAYS_INLINE path</type>
      <name>operator&quot;&quot;_tpath</name>
      <anchorfile>namespacetoml_1_1literals.html</anchorfile>
      <anchor>aa726bfdb3e319d0fb1884ad0aa6d1c68</anchor>
      <arglist>(const char *str, size_t len)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>configuration</name>
    <title>Library Configuration</title>
    <filename>group__configuration.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>TOML_CONFIG_HEADER</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga09204feb4a3ff5534623c2bd052dcec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_HEADER_ONLY</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga8219bfd7e75587516385b6022b28abc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_HEADER_ONLY</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga8219bfd7e75587516385b6022b28abc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_IMPLEMENTATION</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga27ee69835a1ddff9dbaf3015b4b08a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_EXPORTED_CLASS</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga3d7aebf91431575688d573f09a17559a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_EXPORTED_MEMBER_FUNCTION</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>gadf515bb7a6b8ce6b14bf86c8961a63cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_EXPORTED_STATIC_FUNCTION</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga8436c6f378c73f3446a3b6f1e2c5e81c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_EXPORTED_FREE_FUNCTION</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>gac40a454cde06de4e76df3d6d460a3544</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_ENABLE_UNRELEASED_FEATURES</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga1110ff7d189a7738b9109d120f568b6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_ENABLE_PARSER</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga121912d75d4624de6ab6854e41d8a852</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_ENABLE_FORMATTERS</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga9fc77582d9de77f59d2ddc9ae1f748ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_ENABLE_WINDOWS_COMPAT</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga94867db67c98e0e9d4fbb70690951fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_OPTIONAL_TYPE</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga9c2c03f867eb6d76a5f65b06eeb1186e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_EXCEPTIONS</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga93097ecd88ca4bca393f60a78bda643b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_CALLCONV</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga2bfc7ae4747f15378d92249aadce019e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_SMALL_FLOAT_TYPE</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga11a3368da40938a6b5cfd898320706f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_ASSERT</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga8c407a8f6fe52a795db35be3f00393f8</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_SMALL_INT_TYPE</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga0722fa2c57da6360c7f2ba08c60e1a81</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>md_poxy_changelog</name>
    <title>Changelog</title>
    <filename>md_poxy_changelog</filename>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>toml++</title>
    <filename>index</filename>
    <docanchor file="index.html" title="Features">mainpage-features</docanchor>
    <docanchor file="index.html" title="API documentation">mainpage-api-documentation</docanchor>
    <docanchor file="index.html" title="Basic examples">mainpage-example</docanchor>
    <docanchor file="index.html" title="Parsing files">mainpage-example-parsing-files</docanchor>
    <docanchor file="index.html" title="Parsing strings and iostreams">mainpage-example-parsing-strings</docanchor>
    <docanchor file="index.html" title="Handling errors without exceptions">mainpage-example-parsing-without-exceptions</docanchor>
    <docanchor file="index.html" title="Custom error formatting">mainpage-example-custom-error-formatting</docanchor>
    <docanchor file="index.html" title="Working with TOML data">mainpage-example-manipulations</docanchor>
    <docanchor file="index.html" title="Serializing as TOML, JSON and YAML">mainpage-example-serialization</docanchor>
    <docanchor file="index.html" title="Speeding up compilation">mainpage-example-speed-up-compilation</docanchor>
    <docanchor file="index.html" title="Adding toml++ to your project">mainpage-adding-lib</docanchor>
    <docanchor file="index.html" title="&quot;The old fashioned way&quot;">mainpage-adding-lib-old-school</docanchor>
    <docanchor file="index.html" title="Conan">mainpage-adding-lib-conan</docanchor>
    <docanchor file="index.html" title="DDS">mainpage-adding-lib-dds</docanchor>
    <docanchor file="index.html" title="Meson">mainpage-adding-lib-meson</docanchor>
    <docanchor file="index.html" title="Tipi.build">mainpage-adding-lib-tipi</docanchor>
    <docanchor file="index.html" title="Vcpkg">mainpage-adding-lib-vcpkg</docanchor>
    <docanchor file="index.html" title="CMake FetchContent">mainpage-adding-lib-cmake-fetch-content</docanchor>
    <docanchor file="index.html" title="Git submodules">mainpage-adding-lib-git-submodules</docanchor>
    <docanchor file="index.html" title="Other environments and package managers">mainpage-adding-lib-other</docanchor>
    <docanchor file="index.html" title="Special mention: Python">mainpage-adding-lib-python</docanchor>
    <docanchor file="index.html" title="Library configuration options">mainpage-configuration</docanchor>
    <docanchor file="index.html" title="Contributing">mainpage-contributing</docanchor>
    <docanchor file="index.html" title="License">mainpage-license</docanchor>
    <docanchor file="index.html" title="Contacting the author">mainpage-contact</docanchor>
  </compound>
</tagfile>
